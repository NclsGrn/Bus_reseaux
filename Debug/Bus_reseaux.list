
Bus_reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ddc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005f6c  08005f6c  00015f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d0  080060d0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060d8  080060d8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060dc  080060dc  000160dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080060e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000007c  0800615c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  0800615c  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001484d  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d37  00000000  00000000  000348f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00037630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00038538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028280  00000000  00000000  00039308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d44  00000000  00000000  00061588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee8e5  00000000  00000000  000732cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00161bb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044bc  00000000  00000000  00161c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f54 	.word	0x08005f54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005f54 	.word	0x08005f54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_CAN1_Init+0x64>)
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <MX_CAN1_Init+0x68>)
 8000570:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <MX_CAN1_Init+0x64>)
 8000574:	2220      	movs	r2, #32
 8000576:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_CAN1_Init+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_CAN1_Init+0x64>)
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_CAN1_Init+0x64>)
 8000586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800058a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_CAN1_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_CAN1_Init+0x64>)
 8000594:	2200      	movs	r2, #0
 8000596:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_CAN1_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_CAN1_Init+0x64>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_CAN1_Init+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <MX_CAN1_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_CAN1_Init+0x64>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_CAN1_Init+0x64>)
 80005b8:	f000 fe62 	bl	8001280 <HAL_CAN_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80005c2:	f000 fb29 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000ac 	.word	0x200000ac
 80005d0:	40006400 	.word	0x40006400

080005d4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <HAL_CAN_MspInit+0x7c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d128      	bne.n	8000648 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <HAL_CAN_MspInit+0x80>)
 80005f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fa:	4a16      	ldr	r2, [pc, #88]	; (8000654 <HAL_CAN_MspInit+0x80>)
 80005fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000600:	6593      	str	r3, [r2, #88]	; 0x58
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <HAL_CAN_MspInit+0x80>)
 8000604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <HAL_CAN_MspInit+0x80>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a10      	ldr	r2, [pc, #64]	; (8000654 <HAL_CAN_MspInit+0x80>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_CAN_MspInit+0x80>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000626:	f44f 7340 	mov.w	r3, #768	; 0x300
 800062a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000638:	2309      	movs	r3, #9
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <HAL_CAN_MspInit+0x84>)
 8000644:	f001 f9c6 	bl	80019d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000648:	bf00      	nop
 800064a:	3728      	adds	r7, #40	; 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40006400 	.word	0x40006400
 8000654:	40021000 	.word	0x40021000
 8000658:	48000400 	.word	0x48000400

0800065c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b28      	ldr	r3, [pc, #160]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a24      	ldr	r2, [pc, #144]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006da:	f001 fb25 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_GPIO_Init+0xc8>)
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_GPIO_Init+0xcc>)
 80006f4:	f001 f96e 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006f8:	2320      	movs	r3, #32
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f001 f95f 	bl	80019d4 <HAL_GPIO_Init>

}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000
 8000724:	10210000 	.word	0x10210000
 8000728:	48000800 	.word	0x48000800

0800072c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <MX_I2C1_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <MX_I2C1_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_I2C1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000768:	f001 faf6 	bl	8001d58 <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 fa51 	bl	8000c18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	; (80007a0 <MX_I2C1_Init+0x74>)
 800077a:	f001 ff47 	bl	800260c <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 fa48 	bl	8000c18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_I2C1_Init+0x74>)
 800078c:	f001 ff89 	bl	80026a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 fa3f 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000d4 	.word	0x200000d4
 80007a4:	40005400 	.word	0x40005400
 80007a8:	10909cec 	.word	0x10909cec

080007ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b0ac      	sub	sp, #176	; 0xb0
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2288      	movs	r2, #136	; 0x88
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f004 fbed 	bl	8004fac <memset>
  if(i2cHandle->Instance==I2C1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a21      	ldr	r2, [pc, #132]	; (800085c <HAL_I2C_MspInit+0xb0>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d13a      	bne.n	8000852 <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007dc:	2340      	movs	r3, #64	; 0x40
 80007de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fdf7 	bl	80033dc <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007f4:	f000 fa10 	bl	8000c18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <HAL_I2C_MspInit+0xb4>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fc:	4a18      	ldr	r2, [pc, #96]	; (8000860 <HAL_I2C_MspInit+0xb4>)
 80007fe:	f043 0302 	orr.w	r3, r3, #2
 8000802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_I2C_MspInit+0xb4>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000810:	23c0      	movs	r3, #192	; 0xc0
 8000812:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000816:	2312      	movs	r3, #18
 8000818:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000828:	2304      	movs	r3, #4
 800082a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000832:	4619      	mov	r1, r3
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <HAL_I2C_MspInit+0xb8>)
 8000836:	f001 f8cd 	bl	80019d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_I2C_MspInit+0xb4>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_I2C_MspInit+0xb4>)
 8000840:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000844:	6593      	str	r3, [r2, #88]	; 0x58
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_I2C_MspInit+0xb4>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000852:	bf00      	nop
 8000854:	37b0      	adds	r7, #176	; 0xb0
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40005400 	.word	0x40005400
 8000860:	40021000 	.word	0x40021000
 8000864:	48000400 	.word	0x48000400

08000868 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	; 0x30
 800086c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800086e:	f000 fc67 	bl	8001140 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000872:	f000 f953 	bl	8000b1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000876:	f7ff fef1 	bl	800065c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800087a:	f000 fb57 	bl	8000f2c <MX_USART2_UART_Init>
	MX_CAN1_Init();
 800087e:	f7ff fe73 	bl	8000568 <MX_CAN1_Init>
	MX_UART4_Init();
 8000882:	f000 fb23 	bl	8000ecc <MX_UART4_Init>
	MX_I2C1_Init();
 8000886:	f7ff ff51 	bl	800072c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	printf("Starting...\r\n");
 800088a:	4889      	ldr	r0, [pc, #548]	; (8000ab0 <main+0x248>)
 800088c:	f004 fc1c 	bl	80050c8 <puts>
	HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 1); //activer l'UART STM<-->Ordi
 8000890:	2201      	movs	r2, #1
 8000892:	4988      	ldr	r1, [pc, #544]	; (8000ab4 <main+0x24c>)
 8000894:	4888      	ldr	r0, [pc, #544]	; (8000ab8 <main+0x250>)
 8000896:	f003 fb3f 	bl	8003f18 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, uart_rx_buffer, 1); //activer l'UART STM<-->Raspberry
 800089a:	2201      	movs	r2, #1
 800089c:	4985      	ldr	r1, [pc, #532]	; (8000ab4 <main+0x24c>)
 800089e:	4887      	ldr	r0, [pc, #540]	; (8000abc <main+0x254>)
 80008a0:	f003 fb3a 	bl	8003f18 <HAL_UART_Receive_IT>

	//identification du BMP280
	HAL_I2C_Master_Transmit(&hi2c1, 0x77<<1, i2c_t_buffer, 1, HAL_MAX_DELAY);
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2301      	movs	r3, #1
 80008ac:	4a84      	ldr	r2, [pc, #528]	; (8000ac0 <main+0x258>)
 80008ae:	21ee      	movs	r1, #238	; 0xee
 80008b0:	4884      	ldr	r0, [pc, #528]	; (8000ac4 <main+0x25c>)
 80008b2:	f001 fae1 	bl	8001e78 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, 0x77<<1, i2c_r_buffer, 1, HAL_MAX_DELAY);
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2301      	movs	r3, #1
 80008be:	4a82      	ldr	r2, [pc, #520]	; (8000ac8 <main+0x260>)
 80008c0:	21ee      	movs	r1, #238	; 0xee
 80008c2:	4880      	ldr	r0, [pc, #512]	; (8000ac4 <main+0x25c>)
 80008c4:	f001 fbcc 	bl	8002060 <HAL_I2C_Master_Receive>
	printf("%x \r\n", i2c_r_buffer[0]);
 80008c8:	4b7f      	ldr	r3, [pc, #508]	; (8000ac8 <main+0x260>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	487f      	ldr	r0, [pc, #508]	; (8000acc <main+0x264>)
 80008d0:	f004 fb74 	bl	8004fbc <iprintf>

	//configuration du BMP280
	HAL_I2C_Master_Transmit(&hi2c1, 0x77<<1, i2c_t_conf_buffer, 2, HAL_MAX_DELAY);
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2302      	movs	r3, #2
 80008dc:	4a7c      	ldr	r2, [pc, #496]	; (8000ad0 <main+0x268>)
 80008de:	21ee      	movs	r1, #238	; 0xee
 80008e0:	4878      	ldr	r0, [pc, #480]	; (8000ac4 <main+0x25c>)
 80008e2:	f001 fac9 	bl	8001e78 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, 0x77<<1, i2c_r_conf_buffer, 1, HAL_MAX_DELAY);
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2301      	movs	r3, #1
 80008ee:	4a79      	ldr	r2, [pc, #484]	; (8000ad4 <main+0x26c>)
 80008f0:	21ee      	movs	r1, #238	; 0xee
 80008f2:	4874      	ldr	r0, [pc, #464]	; (8000ac4 <main+0x25c>)
 80008f4:	f001 fbb4 	bl	8002060 <HAL_I2C_Master_Receive>
	printf("%x \r\n", i2c_r_conf_buffer[0]);
 80008f8:	4b76      	ldr	r3, [pc, #472]	; (8000ad4 <main+0x26c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	4873      	ldr	r0, [pc, #460]	; (8000acc <main+0x264>)
 8000900:	f004 fb5c 	bl	8004fbc <iprintf>
	//configuring CAN
	uint8_t message[2]={0x54,0x01};
 8000904:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8000908:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t zero[2]={0x54,0x00};
 800090a:	2354      	movs	r3, #84	; 0x54
 800090c:	843b      	strh	r3, [r7, #32]
	uint32_t mail;



	HAL_CAN_Start (&hcan1);
 800090e:	4872      	ldr	r0, [pc, #456]	; (8000ad8 <main+0x270>)
 8000910:	f000 fdb1 	bl	8001476 <HAL_CAN_Start>
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.StdId=0x61;
 8000914:	2361      	movs	r3, #97	; 0x61
 8000916:	607b      	str	r3, [r7, #4]
	TxHeader.IDE=CAN_ID_STD;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
	TxHeader.RTR=CAN_RTR_DATA;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
	TxHeader.DLC=2;
 8000920:	2302      	movs	r3, #2
 8000922:	617b      	str	r3, [r7, #20]
	TxHeader.TransmitGlobalTime=DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	763b      	strb	r3, [r7, #24]
	//Setting motor to zero
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t) {0x00,0x00} , &mail);
 8000928:	2300      	movs	r3, #0
 800092a:	461a      	mov	r2, r3
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	1d39      	adds	r1, r7, #4
 8000932:	4869      	ldr	r0, [pc, #420]	; (8000ad8 <main+0x270>)
 8000934:	f000 fde3 	bl	80014fe <HAL_CAN_AddTxMessage>
	HAL_Delay(100);
 8000938:	2064      	movs	r0, #100	; 0x64
 800093a:	f000 fc7d 	bl	8001238 <HAL_Delay>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &mail);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000946:	1d39      	adds	r1, r7, #4
 8000948:	4863      	ldr	r0, [pc, #396]	; (8000ad8 <main+0x270>)
 800094a:	f000 fdd8 	bl	80014fe <HAL_CAN_AddTxMessage>
		//Send_CAN_Message(message,&hcan1,pHeader,mail);
		//to code with tasks
		HAL_Delay(1000);
 800094e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000952:	f000 fc71 	bl	8001238 <HAL_Delay>
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, zero, &mail);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	f107 0220 	add.w	r2, r7, #32
 800095e:	1d39      	adds	r1, r7, #4
 8000960:	485d      	ldr	r0, [pc, #372]	; (8000ad8 <main+0x270>)
 8000962:	f000 fdcc 	bl	80014fe <HAL_CAN_AddTxMessage>
		HAL_Delay(1000);
 8000966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096a:	f000 fc65 	bl	8001238 <HAL_Delay>
		//Send_CAN_Message(zero,&hcan1,pHeader,mail);

		//echo - affichage sur la console
		if(it_uart==1){
 800096e:	4b5b      	ldr	r3, [pc, #364]	; (8000adc <main+0x274>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d102      	bne.n	800097c <main+0x114>
			//uart_tx_buffer[1] = uart_rx_buffer[1];
			//printf("Lettre = %c \r\n", uart_tx_buffer[1]);
			it_uart = 0;
 8000976:	4b59      	ldr	r3, [pc, #356]	; (8000adc <main+0x274>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]

		}

		//interprétation des commandes envoyées par la raspberry et réponse du STM
		if(it_uart4==1){
 800097c:	4b58      	ldr	r3, [pc, #352]	; (8000ae0 <main+0x278>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d148      	bne.n	8000a16 <main+0x1ae>
			HAL_I2C_Master_Transmit(&hi2c1, 0x77<<1, i2c_t_data_buffer, 1, 50);
 8000984:	2332      	movs	r3, #50	; 0x32
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2301      	movs	r3, #1
 800098a:	4a56      	ldr	r2, [pc, #344]	; (8000ae4 <main+0x27c>)
 800098c:	21ee      	movs	r1, #238	; 0xee
 800098e:	484d      	ldr	r0, [pc, #308]	; (8000ac4 <main+0x25c>)
 8000990:	f001 fa72 	bl	8001e78 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c1, 0x77<<1, i2c_r_data_buffer, 6, 50);
 8000994:	2332      	movs	r3, #50	; 0x32
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2306      	movs	r3, #6
 800099a:	4a53      	ldr	r2, [pc, #332]	; (8000ae8 <main+0x280>)
 800099c:	21ee      	movs	r1, #238	; 0xee
 800099e:	4849      	ldr	r0, [pc, #292]	; (8000ac4 <main+0x25c>)
 80009a0:	f001 fb5e 	bl	8002060 <HAL_I2C_Master_Receive>
			pres = i2c_r_data_buffer[0]<<12 | i2c_r_data_buffer[1]<<4 | i2c_r_data_buffer[2]>>4;
 80009a4:	4b50      	ldr	r3, [pc, #320]	; (8000ae8 <main+0x280>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	031a      	lsls	r2, r3, #12
 80009aa:	4b4f      	ldr	r3, [pc, #316]	; (8000ae8 <main+0x280>)
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	4313      	orrs	r3, r2
 80009b2:	4a4d      	ldr	r2, [pc, #308]	; (8000ae8 <main+0x280>)
 80009b4:	7892      	ldrb	r2, [r2, #2]
 80009b6:	0912      	lsrs	r2, r2, #4
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	4313      	orrs	r3, r2
 80009bc:	461a      	mov	r2, r3
 80009be:	4b4b      	ldr	r3, [pc, #300]	; (8000aec <main+0x284>)
 80009c0:	601a      	str	r2, [r3, #0]
			temp = i2c_r_data_buffer[3]<<12 | i2c_r_data_buffer[4]<<4 | i2c_r_data_buffer[5]>>4;
 80009c2:	4b49      	ldr	r3, [pc, #292]	; (8000ae8 <main+0x280>)
 80009c4:	78db      	ldrb	r3, [r3, #3]
 80009c6:	031a      	lsls	r2, r3, #12
 80009c8:	4b47      	ldr	r3, [pc, #284]	; (8000ae8 <main+0x280>)
 80009ca:	791b      	ldrb	r3, [r3, #4]
 80009cc:	011b      	lsls	r3, r3, #4
 80009ce:	4313      	orrs	r3, r2
 80009d0:	4a45      	ldr	r2, [pc, #276]	; (8000ae8 <main+0x280>)
 80009d2:	7952      	ldrb	r2, [r2, #5]
 80009d4:	0912      	lsrs	r2, r2, #4
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	4313      	orrs	r3, r2
 80009da:	461a      	mov	r2, r3
 80009dc:	4b44      	ldr	r3, [pc, #272]	; (8000af0 <main+0x288>)
 80009de:	601a      	str	r2, [r3, #0]
			//Rotation du moteur selon la température extérieure
			if(uart4_rx_buffer[0]=='G'){
 80009e0:	4b44      	ldr	r3, [pc, #272]	; (8000af4 <main+0x28c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b47      	cmp	r3, #71	; 0x47
 80009e6:	d113      	bne.n	8000a10 <main+0x1a8>
				if(uart4_rx_buffer[4]=='T'){
 80009e8:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <main+0x28c>)
 80009ea:	791b      	ldrb	r3, [r3, #4]
 80009ec:	2b54      	cmp	r3, #84	; 0x54
 80009ee:	d105      	bne.n	80009fc <main+0x194>
					//on demande T donc on veut renvoyer 'T=val' donc on doit mettre ça dans le buffer à transmettre
					printf("T = %x H \r\n", temp);
 80009f0:	4b3f      	ldr	r3, [pc, #252]	; (8000af0 <main+0x288>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	4840      	ldr	r0, [pc, #256]	; (8000af8 <main+0x290>)
 80009f8:	f004 fae0 	bl	8004fbc <iprintf>
					/*uart4_tx_buffer[0]='T';
					uart4_tx_buffer[1]='=';
					uart4_tx_buffer[2]=temp;
					HAL_UART_Transmit(&huart4, uart4_tx_buffer, 3, 50);*/
				}
				if(uart4_rx_buffer[4]=='P'){
 80009fc:	4b3d      	ldr	r3, [pc, #244]	; (8000af4 <main+0x28c>)
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	2b50      	cmp	r3, #80	; 0x50
 8000a02:	d105      	bne.n	8000a10 <main+0x1a8>
					//on demande P donc on veut renvoyer 'P=val' donc on doit mettre ça dans le buffer à transmettre
					printf("P = %x H \r\n", pres);
 8000a04:	4b39      	ldr	r3, [pc, #228]	; (8000aec <main+0x284>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	483c      	ldr	r0, [pc, #240]	; (8000afc <main+0x294>)
 8000a0c:	f004 fad6 	bl	8004fbc <iprintf>
					uart4_tx_buffer[1]='=';
					uart4_tx_buffer[2]=pres;
					HAL_UART_Transmit(&huart4, uart4_tx_buffer, 3, 50);*/
				}
			}
			it_uart4 =0;
 8000a10:	4b33      	ldr	r3, [pc, #204]	; (8000ae0 <main+0x278>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
		}

		/*Affichage de la temp et de la press non compensés*/
		HAL_I2C_Master_Transmit(&hi2c1, 0x77<<1, i2c_t_data_buffer, 1, 50);
 8000a16:	2332      	movs	r3, #50	; 0x32
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	4a31      	ldr	r2, [pc, #196]	; (8000ae4 <main+0x27c>)
 8000a1e:	21ee      	movs	r1, #238	; 0xee
 8000a20:	4828      	ldr	r0, [pc, #160]	; (8000ac4 <main+0x25c>)
 8000a22:	f001 fa29 	bl	8001e78 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, 0x77<<1, i2c_r_data_buffer, 6, 50);
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2306      	movs	r3, #6
 8000a2c:	4a2e      	ldr	r2, [pc, #184]	; (8000ae8 <main+0x280>)
 8000a2e:	21ee      	movs	r1, #238	; 0xee
 8000a30:	4824      	ldr	r0, [pc, #144]	; (8000ac4 <main+0x25c>)
 8000a32:	f001 fb15 	bl	8002060 <HAL_I2C_Master_Receive>
		p = i2c_r_data_buffer[0]<<12 | i2c_r_data_buffer[1]<<4 | i2c_r_data_buffer[2]>>4;
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <main+0x280>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	031a      	lsls	r2, r3, #12
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <main+0x280>)
 8000a3e:	785b      	ldrb	r3, [r3, #1]
 8000a40:	011b      	lsls	r3, r3, #4
 8000a42:	4313      	orrs	r3, r2
 8000a44:	4a28      	ldr	r2, [pc, #160]	; (8000ae8 <main+0x280>)
 8000a46:	7892      	ldrb	r2, [r2, #2]
 8000a48:	0912      	lsrs	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <main+0x298>)
 8000a52:	601a      	str	r2, [r3, #0]
		t = i2c_r_data_buffer[3]<<12 | i2c_r_data_buffer[4]<<4 | i2c_r_data_buffer[5]>>4;
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <main+0x280>)
 8000a56:	78db      	ldrb	r3, [r3, #3]
 8000a58:	031a      	lsls	r2, r3, #12
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <main+0x280>)
 8000a5c:	791b      	ldrb	r3, [r3, #4]
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	4313      	orrs	r3, r2
 8000a62:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <main+0x280>)
 8000a64:	7952      	ldrb	r2, [r2, #5]
 8000a66:	0912      	lsrs	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <main+0x29c>)
 8000a70:	601a      	str	r2, [r3, #0]
		printf("Debut \r\n");
 8000a72:	4825      	ldr	r0, [pc, #148]	; (8000b08 <main+0x2a0>)
 8000a74:	f004 fb28 	bl	80050c8 <puts>
		printf("Pression : %d et Temperature %d \r\n", p, t);
 8000a78:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <main+0x298>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a21      	ldr	r2, [pc, #132]	; (8000b04 <main+0x29c>)
 8000a7e:	6812      	ldr	r2, [r2, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	4822      	ldr	r0, [pc, #136]	; (8000b0c <main+0x2a4>)
 8000a84:	f004 fa9a 	bl	8004fbc <iprintf>
		//compensation maison
		t_comp=i2c_r_data_buffer[3]<<12/100;
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <main+0x280>)
 8000a8a:	78db      	ldrb	r3, [r3, #3]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <main+0x2a8>)
 8000a90:	601a      	str	r2, [r3, #0]
		printf("Temperature compensée: %d \r\n",t_comp);
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <main+0x2a8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	481e      	ldr	r0, [pc, #120]	; (8000b14 <main+0x2ac>)
 8000a9a:	f004 fa8f 	bl	8004fbc <iprintf>
		printf("Fin \r\n");
 8000a9e:	481e      	ldr	r0, [pc, #120]	; (8000b18 <main+0x2b0>)
 8000aa0:	f004 fb12 	bl	80050c8 <puts>
		HAL_Delay(5000);
 8000aa4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000aa8:	f000 fbc6 	bl	8001238 <HAL_Delay>
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &mail);
 8000aac:	e747      	b.n	800093e <main+0xd6>
 8000aae:	bf00      	nop
 8000ab0:	08005f6c 	.word	0x08005f6c
 8000ab4:	20000204 	.word	0x20000204
 8000ab8:	200002c8 	.word	0x200002c8
 8000abc:	20000244 	.word	0x20000244
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	200000d4 	.word	0x200000d4
 8000ac8:	20000200 	.word	0x20000200
 8000acc:	08005f7c 	.word	0x08005f7c
 8000ad0:	20000004 	.word	0x20000004
 8000ad4:	20000174 	.word	0x20000174
 8000ad8:	200000ac 	.word	0x200000ac
 8000adc:	20000098 	.word	0x20000098
 8000ae0:	2000009c 	.word	0x2000009c
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	2000016c 	.word	0x2000016c
 8000aec:	20000124 	.word	0x20000124
 8000af0:	20000178 	.word	0x20000178
 8000af4:	2000017c 	.word	0x2000017c
 8000af8:	08005f84 	.word	0x08005f84
 8000afc:	08005f90 	.word	0x08005f90
 8000b00:	20000168 	.word	0x20000168
 8000b04:	20000120 	.word	0x20000120
 8000b08:	08005f9c 	.word	0x08005f9c
 8000b0c:	08005fa4 	.word	0x08005fa4
 8000b10:	200001bc 	.word	0x200001bc
 8000b14:	08005fc8 	.word	0x08005fc8
 8000b18:	08005fe8 	.word	0x08005fe8

08000b1c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b096      	sub	sp, #88	; 0x58
 8000b20:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	2244      	movs	r2, #68	; 0x44
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f004 fa3e 	bl	8004fac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b42:	f001 fe09 	bl	8002758 <HAL_PWREx_ControlVoltageScaling>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000b4c:	f000 f864 	bl	8000c18 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b50:	2302      	movs	r3, #2
 8000b52:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b58:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b62:	2302      	movs	r3, #2
 8000b64:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000b6a:	230a      	movs	r3, #10
 8000b6c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 fe40 	bl	8002804 <HAL_RCC_OscConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000b8a:	f000 f845 	bl	8000c18 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8e:	230f      	movs	r3, #15
 8000b90:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b92:	2303      	movs	r3, #3
 8000b94:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 fa12 	bl	8002fd0 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000bb2:	f000 f831 	bl	8000c18 <Error_Handler>
	}
}
 8000bb6:	bf00      	nop
 8000bb8:	3758      	adds	r7, #88	; 0x58
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <HAL_UART_RxCpltCallback+0x40>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d107      	bne.n	8000be0 <HAL_UART_RxCpltCallback+0x20>
		it_uart4 = 1;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_UART_RxCpltCallback+0x44>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, uart4_rx_buffer, 1);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	490b      	ldr	r1, [pc, #44]	; (8000c08 <HAL_UART_RxCpltCallback+0x48>)
 8000bda:	4809      	ldr	r0, [pc, #36]	; (8000c00 <HAL_UART_RxCpltCallback+0x40>)
 8000bdc:	f003 f99c 	bl	8003f18 <HAL_UART_Receive_IT>
	}
	if(huart==&huart2){
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_UART_RxCpltCallback+0x4c>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d107      	bne.n	8000bf8 <HAL_UART_RxCpltCallback+0x38>
		it_uart = 1;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_UART_RxCpltCallback+0x50>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 5); //commande de la rasp sur 5 caractères (GET_X)
 8000bee:	2205      	movs	r2, #5
 8000bf0:	4908      	ldr	r1, [pc, #32]	; (8000c14 <HAL_UART_RxCpltCallback+0x54>)
 8000bf2:	4806      	ldr	r0, [pc, #24]	; (8000c0c <HAL_UART_RxCpltCallback+0x4c>)
 8000bf4:	f003 f990 	bl	8003f18 <HAL_UART_Receive_IT>
	}

}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000244 	.word	0x20000244
 8000c04:	2000009c 	.word	0x2000009c
 8000c08:	2000017c 	.word	0x2000017c
 8000c0c:	200002c8 	.word	0x200002c8
 8000c10:	20000098 	.word	0x20000098
 8000c14:	20000204 	.word	0x20000204

08000c18 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_MspInit+0x44>)
 8000c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_MspInit+0x44>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6613      	str	r3, [r2, #96]	; 0x60
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_MspInit+0x44>)
 8000c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_MspInit+0x44>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_MspInit+0x44>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_MspInit+0x44>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000

08000c6c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8000c74:	1d39      	adds	r1, r7, #4
 8000c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <__io_putchar+0x30>)
 8000c7e:	f003 f8b7 	bl	8003df0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000c82:	1d39      	adds	r1, r7, #4
 8000c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <__io_putchar+0x34>)
 8000c8c:	f003 f8b0 	bl	8003df0 <HAL_UART_Transmit>


  return ch;
 8000c90:	687b      	ldr	r3, [r7, #4]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000244 	.word	0x20000244
 8000ca0:	200002c8 	.word	0x200002c8

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf0:	f000 fa82 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <USART2_IRQHandler+0x10>)
 8000cfe:	f003 f94f 	bl	8003fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200002c8 	.word	0x200002c8

08000d0c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <UART4_IRQHandler+0x10>)
 8000d12:	f003 f945 	bl	8003fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000244 	.word	0x20000244

08000d20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	e00a      	b.n	8000d48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d32:	f3af 8000 	nop.w
 8000d36:	4601      	mov	r1, r0
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	60ba      	str	r2, [r7, #8]
 8000d3e:	b2ca      	uxtb	r2, r1
 8000d40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf0      	blt.n	8000d32 <_read+0x12>
	}

return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	60f8      	str	r0, [r7, #12]
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	e009      	b.n	8000d80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	60ba      	str	r2, [r7, #8]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff79 	bl	8000c6c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	dbf1      	blt.n	8000d6c <_write+0x12>
	}
	return len;
 8000d88:	687b      	ldr	r3, [r7, #4]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_close>:

int _close(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	return -1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dba:	605a      	str	r2, [r3, #4]
	return 0;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_isatty>:

int _isatty(int file)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
	return 1;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
	return 0;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f004 f894 	bl	8004f58 <__errno>
 8000e30:	4603      	mov	r3, r0
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20018000 	.word	0x20018000
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	200000a0 	.word	0x200000a0
 8000e64:	20000360 	.word	0x20000360

08000e68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <SystemInit+0x5c>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <SystemInit+0x5c>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <SystemInit+0x60>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <SystemInit+0x60>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <SystemInit+0x60>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <SystemInit+0x60>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <SystemInit+0x60>)
 8000e94:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e98:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <SystemInit+0x60>)
 8000ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <SystemInit+0x60>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <SystemInit+0x60>)
 8000eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <SystemInit+0x60>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00
 8000ec8:	40021000 	.word	0x40021000

08000ecc <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_UART4_Init+0x58>)
 8000ed2:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <MX_UART4_Init+0x5c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <MX_UART4_Init+0x58>)
 8000ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000edc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_UART4_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_UART4_Init+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_UART4_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_UART4_Init+0x58>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_UART4_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_UART4_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_UART4_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_UART4_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_UART4_Init+0x58>)
 8000f10:	f002 ff20 	bl	8003d54 <HAL_UART_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000f1a:	f7ff fe7d 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000244 	.word	0x20000244
 8000f28:	40004c00 	.word	0x40004c00

08000f2c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f32:	4a15      	ldr	r2, [pc, #84]	; (8000f88 <MX_USART2_UART_Init+0x5c>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_USART2_UART_Init+0x58>)
 8000f70:	f002 fef0 	bl	8003d54 <HAL_UART_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f7a:	f7ff fe4d 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200002c8 	.word	0x200002c8
 8000f88:	40004400 	.word	0x40004400

08000f8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0ae      	sub	sp, #184	; 0xb8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	2288      	movs	r2, #136	; 0x88
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 fffd 	bl	8004fac <memset>
  if(uartHandle->Instance==UART4)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a4a      	ldr	r2, [pc, #296]	; (80010e0 <HAL_UART_MspInit+0x154>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d144      	bne.n	8001046 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 fa07 	bl	80033dc <HAL_RCCEx_PeriphCLKConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fd4:	f7ff fe20 	bl	8000c18 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000fd8:	4b42      	ldr	r3, [pc, #264]	; (80010e4 <HAL_UART_MspInit+0x158>)
 8000fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fdc:	4a41      	ldr	r2, [pc, #260]	; (80010e4 <HAL_UART_MspInit+0x158>)
 8000fde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe4:	4b3f      	ldr	r3, [pc, #252]	; (80010e4 <HAL_UART_MspInit+0x158>)
 8000fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fec:	61bb      	str	r3, [r7, #24]
 8000fee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <HAL_UART_MspInit+0x158>)
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff4:	4a3b      	ldr	r2, [pc, #236]	; (80010e4 <HAL_UART_MspInit+0x158>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffc:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <HAL_UART_MspInit+0x158>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001008:	2303      	movs	r3, #3
 800100a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001020:	2308      	movs	r3, #8
 8001022:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800102a:	4619      	mov	r1, r3
 800102c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001030:	f000 fcd0 	bl	80019d4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	2034      	movs	r0, #52	; 0x34
 800103a:	f000 fc16 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800103e:	2034      	movs	r0, #52	; 0x34
 8001040:	f000 fc2f 	bl	80018a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001044:	e048      	b.n	80010d8 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART2)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a27      	ldr	r2, [pc, #156]	; (80010e8 <HAL_UART_MspInit+0x15c>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d143      	bne.n	80010d8 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001050:	2302      	movs	r3, #2
 8001052:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001054:	2300      	movs	r3, #0
 8001056:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4618      	mov	r0, r3
 800105e:	f002 f9bd 	bl	80033dc <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001068:	f7ff fdd6 	bl	8000c18 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_UART_MspInit+0x158>)
 800106e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001070:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <HAL_UART_MspInit+0x158>)
 8001072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001076:	6593      	str	r3, [r2, #88]	; 0x58
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_UART_MspInit+0x158>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_UART_MspInit+0x158>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <HAL_UART_MspInit+0x158>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_UART_MspInit+0x158>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800109c:	230c      	movs	r3, #12
 800109e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b4:	2307      	movs	r3, #7
 80010b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010be:	4619      	mov	r1, r3
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c4:	f000 fc86 	bl	80019d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	2026      	movs	r0, #38	; 0x26
 80010ce:	f000 fbcc 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010d2:	2026      	movs	r0, #38	; 0x26
 80010d4:	f000 fbe5 	bl	80018a2 <HAL_NVIC_EnableIRQ>
}
 80010d8:	bf00      	nop
 80010da:	37b8      	adds	r7, #184	; 0xb8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40004c00 	.word	0x40004c00
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40004400 	.word	0x40004400

080010ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001124 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f0:	f7ff feba 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010f6:	e003      	b.n	8001100 <LoopCopyDataInit>

080010f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010fe:	3104      	adds	r1, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001100:	480a      	ldr	r0, [pc, #40]	; (800112c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001104:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001106:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001108:	d3f6      	bcc.n	80010f8 <CopyDataInit>
	ldr	r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <LoopForever+0x12>)
	b	LoopFillZerobss
 800110c:	e002      	b.n	8001114 <LoopFillZerobss>

0800110e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800110e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001110:	f842 3b04 	str.w	r3, [r2], #4

08001114 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <LoopForever+0x16>)
	cmp	r2, r3
 8001116:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001118:	d3f9      	bcc.n	800110e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111a:	f003 ff23 	bl	8004f64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800111e:	f7ff fba3 	bl	8000868 <main>

08001122 <LoopForever>:

LoopForever:
    b LoopForever
 8001122:	e7fe      	b.n	8001122 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001124:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001128:	080060e0 	.word	0x080060e0
	ldr	r0, =_sdata
 800112c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001130:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8001134:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8001138:	20000360 	.word	0x20000360

0800113c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC1_2_IRQHandler>
	...

08001140 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <HAL_Init+0x3c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <HAL_Init+0x3c>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001154:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001156:	2003      	movs	r0, #3
 8001158:	f000 fb7c 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800115c:	2000      	movs	r0, #0
 800115e:	f000 f80f 	bl	8001180 <HAL_InitTick>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	e001      	b.n	8001172 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800116e:	f7ff fd59 	bl	8000c24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001172:	79fb      	ldrb	r3, [r7, #7]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40022000 	.word	0x40022000

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_InitTick+0x6c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d023      	beq.n	80011dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_InitTick+0x70>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_InitTick+0x6c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fb87 	bl	80018be <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10f      	bne.n	80011d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d809      	bhi.n	80011d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c4:	f000 fb51 	bl	800186a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c8:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <HAL_InitTick+0x74>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e007      	b.n	80011e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e004      	b.n	80011e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	e001      	b.n	80011e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000014 	.word	0x20000014
 80011f0:	2000000c 	.word	0x2000000c
 80011f4:	20000010 	.word	0x20000010

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000014 	.word	0x20000014
 800121c:	2000034c 	.word	0x2000034c

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	2000034c 	.word	0x2000034c

08001238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff ffee 	bl	8001220 <HAL_GetTick>
 8001244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001250:	d005      	beq.n	800125e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_Delay+0x44>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800125e:	bf00      	nop
 8001260:	f7ff ffde 	bl	8001220 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8f7      	bhi.n	8001260 <HAL_Delay+0x28>
  {
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000014 	.word	0x20000014

08001280 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0ed      	b.n	800146e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff f998 	bl	80005d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0202 	bic.w	r2, r2, #2
 80012b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b4:	f7ff ffb4 	bl	8001220 <HAL_GetTick>
 80012b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012ba:	e012      	b.n	80012e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012bc:	f7ff ffb0 	bl	8001220 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b0a      	cmp	r3, #10
 80012c8:	d90b      	bls.n	80012e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2205      	movs	r2, #5
 80012da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e0c5      	b.n	800146e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e5      	bne.n	80012bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0201 	orr.w	r2, r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001300:	f7ff ff8e 	bl	8001220 <HAL_GetTick>
 8001304:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001306:	e012      	b.n	800132e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001308:	f7ff ff8a 	bl	8001220 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d90b      	bls.n	800132e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2205      	movs	r2, #5
 8001326:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e09f      	b.n	800146e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0e5      	beq.n	8001308 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7e1b      	ldrb	r3, [r3, #24]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d108      	bne.n	8001356 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	e007      	b.n	8001366 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7e5b      	ldrb	r3, [r3, #25]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d108      	bne.n	8001380 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e007      	b.n	8001390 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800138e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7e9b      	ldrb	r3, [r3, #26]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d108      	bne.n	80013aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0220 	orr.w	r2, r2, #32
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e007      	b.n	80013ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0220 	bic.w	r2, r2, #32
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7edb      	ldrb	r3, [r3, #27]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d108      	bne.n	80013d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0210 	bic.w	r2, r2, #16
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e007      	b.n	80013e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0210 	orr.w	r2, r2, #16
 80013e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7f1b      	ldrb	r3, [r3, #28]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d108      	bne.n	80013fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0208 	orr.w	r2, r2, #8
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e007      	b.n	800140e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0208 	bic.w	r2, r2, #8
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7f5b      	ldrb	r3, [r3, #29]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d108      	bne.n	8001428 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0204 	orr.w	r2, r2, #4
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e007      	b.n	8001438 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0204 	bic.w	r2, r2, #4
 8001436:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	ea42 0103 	orr.w	r1, r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	1e5a      	subs	r2, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b01      	cmp	r3, #1
 8001488:	d12e      	bne.n	80014e8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2202      	movs	r2, #2
 800148e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0201 	bic.w	r2, r2, #1
 80014a0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014a2:	f7ff febd 	bl	8001220 <HAL_GetTick>
 80014a6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014a8:	e012      	b.n	80014d0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014aa:	f7ff feb9 	bl	8001220 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b0a      	cmp	r3, #10
 80014b6:	d90b      	bls.n	80014d0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2205      	movs	r2, #5
 80014c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e012      	b.n	80014f6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1e5      	bne.n	80014aa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e006      	b.n	80014f6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
  }
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014fe:	b480      	push	{r7}
 8001500:	b089      	sub	sp, #36	; 0x24
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001512:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800151c:	7ffb      	ldrb	r3, [r7, #31]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d003      	beq.n	800152a <HAL_CAN_AddTxMessage+0x2c>
 8001522:	7ffb      	ldrb	r3, [r7, #31]
 8001524:	2b02      	cmp	r3, #2
 8001526:	f040 80b8 	bne.w	800169a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10a      	bne.n	800154a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800153a:	2b00      	cmp	r3, #0
 800153c:	d105      	bne.n	800154a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80a0 	beq.w	800168a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	0e1b      	lsrs	r3, r3, #24
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d907      	bls.n	800156a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e09e      	b.n	80016a8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800156a:	2201      	movs	r2, #1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10d      	bne.n	8001598 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001586:	68f9      	ldr	r1, [r7, #12]
 8001588:	6809      	ldr	r1, [r1, #0]
 800158a:	431a      	orrs	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3318      	adds	r3, #24
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	440b      	add	r3, r1
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e00f      	b.n	80015b8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015a2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015a8:	68f9      	ldr	r1, [r7, #12]
 80015aa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80015ac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3318      	adds	r3, #24
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	440b      	add	r3, r1
 80015b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6819      	ldr	r1, [r3, #0]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3318      	adds	r3, #24
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	440b      	add	r3, r1
 80015c8:	3304      	adds	r3, #4
 80015ca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	7d1b      	ldrb	r3, [r3, #20]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d111      	bne.n	80015f8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3318      	adds	r3, #24
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	4413      	add	r3, r2
 80015e0:	3304      	adds	r3, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	6811      	ldr	r1, [r2, #0]
 80015e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3318      	adds	r3, #24
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	440b      	add	r3, r1
 80015f4:	3304      	adds	r3, #4
 80015f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3307      	adds	r3, #7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	061a      	lsls	r2, r3, #24
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3306      	adds	r3, #6
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	041b      	lsls	r3, r3, #16
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3305      	adds	r3, #5
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	4313      	orrs	r3, r2
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	3204      	adds	r2, #4
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	4610      	mov	r0, r2
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	6811      	ldr	r1, [r2, #0]
 8001620:	ea43 0200 	orr.w	r2, r3, r0
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	440b      	add	r3, r1
 800162a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800162e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3303      	adds	r3, #3
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	061a      	lsls	r2, r3, #24
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3302      	adds	r3, #2
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	041b      	lsls	r3, r3, #16
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3301      	adds	r3, #1
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	4313      	orrs	r3, r2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	7812      	ldrb	r2, [r2, #0]
 8001650:	4610      	mov	r0, r2
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	6811      	ldr	r1, [r2, #0]
 8001656:	ea43 0200 	orr.w	r2, r3, r0
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	440b      	add	r3, r1
 8001660:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001664:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3318      	adds	r3, #24
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	4413      	add	r3, r2
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	6811      	ldr	r1, [r2, #0]
 8001678:	f043 0201 	orr.w	r2, r3, #1
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3318      	adds	r3, #24
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	440b      	add	r3, r1
 8001684:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e00e      	b.n	80016a8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e006      	b.n	80016a8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
  }
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3724      	adds	r7, #36	; 0x24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4907      	ldr	r1, [pc, #28]	; (8001750 <__NVIC_EnableIRQ+0x38>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	; (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001820:	d301      	bcc.n	8001826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001822:	2301      	movs	r3, #1
 8001824:	e00f      	b.n	8001846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <SysTick_Config+0x40>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182e:	210f      	movs	r1, #15
 8001830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001834:	f7ff ff8e 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <SysTick_Config+0x40>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	; (8001850 <SysTick_Config+0x40>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff29 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800187c:	f7ff ff3e 	bl	80016fc <__NVIC_GetPriorityGrouping>
 8001880:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f7ff ff8e 	bl	80017a8 <NVIC_EncodePriority>
 800188c:	4602      	mov	r2, r0
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff5d 	bl	8001754 <__NVIC_SetPriority>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff31 	bl	8001718 <__NVIC_EnableIRQ>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffa2 	bl	8001810 <SysTick_Config>
 80018cc:	4603      	mov	r3, r0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b085      	sub	sp, #20
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d008      	beq.n	8001900 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2204      	movs	r2, #4
 80018f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e022      	b.n	8001946 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 020e 	bic.w	r2, r2, #14
 800190e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	f003 021c 	and.w	r2, r3, #28
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d005      	beq.n	8001976 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2204      	movs	r2, #4
 800196e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e029      	b.n	80019ca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 020e 	bic.w	r2, r2, #14
 8001984:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0201 	bic.w	r2, r2, #1
 8001994:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f003 021c 	and.w	r2, r3, #28
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	2101      	movs	r1, #1
 80019a4:	fa01 f202 	lsl.w	r2, r1, r2
 80019a8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	4798      	blx	r3
    }
  }
  return status;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e2:	e17f      	b.n	8001ce4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2101      	movs	r1, #1
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8171 	beq.w	8001cde <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d00b      	beq.n	8001a1c <HAL_GPIO_Init+0x48>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d007      	beq.n	8001a1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a10:	2b11      	cmp	r3, #17
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b12      	cmp	r3, #18
 8001a1a:	d130      	bne.n	8001a7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a52:	2201      	movs	r2, #1
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	f003 0201 	and.w	r2, r3, #1
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d118      	bne.n	8001abc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a90:	2201      	movs	r2, #1
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	f003 0201 	and.w	r2, r3, #1
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x128>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b12      	cmp	r3, #18
 8001afa:	d123      	bne.n	8001b44 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3208      	adds	r2, #8
 8001b3e:	6939      	ldr	r1, [r7, #16]
 8001b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80ac 	beq.w	8001cde <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	4b5f      	ldr	r3, [pc, #380]	; (8001d04 <HAL_GPIO_Init+0x330>)
 8001b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8a:	4a5e      	ldr	r2, [pc, #376]	; (8001d04 <HAL_GPIO_Init+0x330>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6613      	str	r3, [r2, #96]	; 0x60
 8001b92:	4b5c      	ldr	r3, [pc, #368]	; (8001d04 <HAL_GPIO_Init+0x330>)
 8001b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b9e:	4a5a      	ldr	r2, [pc, #360]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bc8:	d025      	beq.n	8001c16 <HAL_GPIO_Init+0x242>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4f      	ldr	r2, [pc, #316]	; (8001d0c <HAL_GPIO_Init+0x338>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d01f      	beq.n	8001c12 <HAL_GPIO_Init+0x23e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4e      	ldr	r2, [pc, #312]	; (8001d10 <HAL_GPIO_Init+0x33c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d019      	beq.n	8001c0e <HAL_GPIO_Init+0x23a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4d      	ldr	r2, [pc, #308]	; (8001d14 <HAL_GPIO_Init+0x340>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <HAL_GPIO_Init+0x236>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4c      	ldr	r2, [pc, #304]	; (8001d18 <HAL_GPIO_Init+0x344>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00d      	beq.n	8001c06 <HAL_GPIO_Init+0x232>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4b      	ldr	r2, [pc, #300]	; (8001d1c <HAL_GPIO_Init+0x348>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d007      	beq.n	8001c02 <HAL_GPIO_Init+0x22e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4a      	ldr	r2, [pc, #296]	; (8001d20 <HAL_GPIO_Init+0x34c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_GPIO_Init+0x22a>
 8001bfa:	2306      	movs	r3, #6
 8001bfc:	e00c      	b.n	8001c18 <HAL_GPIO_Init+0x244>
 8001bfe:	2307      	movs	r3, #7
 8001c00:	e00a      	b.n	8001c18 <HAL_GPIO_Init+0x244>
 8001c02:	2305      	movs	r3, #5
 8001c04:	e008      	b.n	8001c18 <HAL_GPIO_Init+0x244>
 8001c06:	2304      	movs	r3, #4
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x244>
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e004      	b.n	8001c18 <HAL_GPIO_Init+0x244>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e002      	b.n	8001c18 <HAL_GPIO_Init+0x244>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x244>
 8001c16:	2300      	movs	r3, #0
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	f002 0203 	and.w	r2, r2, #3
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	4093      	lsls	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c28:	4937      	ldr	r1, [pc, #220]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	089b      	lsrs	r3, r3, #2
 8001c2e:	3302      	adds	r3, #2
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c36:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c5a:	4a32      	ldr	r2, [pc, #200]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c60:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c84:	4a27      	ldr	r2, [pc, #156]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c8a:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cae:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cd8:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f47f ae78 	bne.w	80019e4 <HAL_GPIO_Init+0x10>
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010000 	.word	0x40010000
 8001d0c:	48000400 	.word	0x48000400
 8001d10:	48000800 	.word	0x48000800
 8001d14:	48000c00 	.word	0x48000c00
 8001d18:	48001000 	.word	0x48001000
 8001d1c:	48001400 	.word	0x48001400
 8001d20:	48001800 	.word	0x48001800
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
 8001d34:	4613      	mov	r3, r2
 8001d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d38:	787b      	ldrb	r3, [r7, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e081      	b.n	8001e6e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fd14 	bl	80007ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2224      	movs	r2, #36	; 0x24
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001da8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001db8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d107      	bne.n	8001dd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	e006      	b.n	8001de0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001dde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d104      	bne.n	8001df2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001df0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	ea42 0103 	orr.w	r1, r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	021a      	lsls	r2, r3, #8
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69d9      	ldr	r1, [r3, #28]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1a      	ldr	r2, [r3, #32]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	461a      	mov	r2, r3
 8001e84:	460b      	mov	r3, r1
 8001e86:	817b      	strh	r3, [r7, #10]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	f040 80da 	bne.w	800204e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_I2C_Master_Transmit+0x30>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e0d3      	b.n	8002050 <HAL_I2C_Master_Transmit+0x1d8>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eb0:	f7ff f9b6 	bl	8001220 <HAL_GetTick>
 8001eb4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2319      	movs	r3, #25
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f9e6 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0be      	b.n	8002050 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2221      	movs	r2, #33	; 0x21
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2210      	movs	r2, #16
 8001ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	893a      	ldrh	r2, [r7, #8]
 8001ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2bff      	cmp	r3, #255	; 0xff
 8001f02:	d90e      	bls.n	8001f22 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	22ff      	movs	r2, #255	; 0xff
 8001f08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	8979      	ldrh	r1, [r7, #10]
 8001f12:	4b51      	ldr	r3, [pc, #324]	; (8002058 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 fb48 	bl	80025b0 <I2C_TransferConfig>
 8001f20:	e06c      	b.n	8001ffc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	8979      	ldrh	r1, [r7, #10]
 8001f34:	4b48      	ldr	r3, [pc, #288]	; (8002058 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fb37 	bl	80025b0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001f42:	e05b      	b.n	8001ffc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	6a39      	ldr	r1, [r7, #32]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f9e3 	bl	8002314 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e07b      	b.n	8002050 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d034      	beq.n	8001ffc <HAL_I2C_Master_Transmit+0x184>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d130      	bne.n	8001ffc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f975 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e04d      	b.n	8002050 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2bff      	cmp	r3, #255	; 0xff
 8001fbc:	d90e      	bls.n	8001fdc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	22ff      	movs	r2, #255	; 0xff
 8001fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	8979      	ldrh	r1, [r7, #10]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 faeb 	bl	80025b0 <I2C_TransferConfig>
 8001fda:	e00f      	b.n	8001ffc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	8979      	ldrh	r1, [r7, #10]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fada 	bl	80025b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d19e      	bne.n	8001f44 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	6a39      	ldr	r1, [r7, #32]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f9c2 	bl	8002394 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e01a      	b.n	8002050 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2220      	movs	r2, #32
 8002020:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_I2C_Master_Transmit+0x1e4>)
 800202e:	400b      	ands	r3, r1
 8002030:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	e000      	b.n	8002050 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800204e:	2302      	movs	r3, #2
  }
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	80002000 	.word	0x80002000
 800205c:	fe00e800 	.word	0xfe00e800

08002060 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	461a      	mov	r2, r3
 800206c:	460b      	mov	r3, r1
 800206e:	817b      	strh	r3, [r7, #10]
 8002070:	4613      	mov	r3, r2
 8002072:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b20      	cmp	r3, #32
 800207e:	f040 80db 	bne.w	8002238 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2C_Master_Receive+0x30>
 800208c:	2302      	movs	r3, #2
 800208e:	e0d4      	b.n	800223a <HAL_I2C_Master_Receive+0x1da>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002098:	f7ff f8c2 	bl	8001220 <HAL_GetTick>
 800209c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2319      	movs	r3, #25
 80020a4:	2201      	movs	r2, #1
 80020a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f8f2 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0bf      	b.n	800223a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2222      	movs	r2, #34	; 0x22
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2210      	movs	r2, #16
 80020c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	893a      	ldrh	r2, [r7, #8]
 80020da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2bff      	cmp	r3, #255	; 0xff
 80020ea:	d90e      	bls.n	800210a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	22ff      	movs	r2, #255	; 0xff
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	4b52      	ldr	r3, [pc, #328]	; (8002244 <HAL_I2C_Master_Receive+0x1e4>)
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fa54 	bl	80025b0 <I2C_TransferConfig>
 8002108:	e06d      	b.n	80021e6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	b2da      	uxtb	r2, r3
 800211a:	8979      	ldrh	r1, [r7, #10]
 800211c:	4b49      	ldr	r3, [pc, #292]	; (8002244 <HAL_I2C_Master_Receive+0x1e4>)
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fa43 	bl	80025b0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800212a:	e05c      	b.n	80021e6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	6a39      	ldr	r1, [r7, #32]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f96b 	bl	800240c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e07c      	b.n	800223a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d034      	beq.n	80021e6 <HAL_I2C_Master_Receive+0x186>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d130      	bne.n	80021e6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	2200      	movs	r2, #0
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f880 	bl	8002294 <I2C_WaitOnFlagUntilTimeout>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e04d      	b.n	800223a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2bff      	cmp	r3, #255	; 0xff
 80021a6:	d90e      	bls.n	80021c6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	22ff      	movs	r2, #255	; 0xff
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	8979      	ldrh	r1, [r7, #10]
 80021b6:	2300      	movs	r3, #0
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f9f6 	bl	80025b0 <I2C_TransferConfig>
 80021c4:	e00f      	b.n	80021e6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	8979      	ldrh	r1, [r7, #10]
 80021d8:	2300      	movs	r3, #0
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 f9e5 	bl	80025b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d19d      	bne.n	800212c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	6a39      	ldr	r1, [r7, #32]
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 f8cd 	bl	8002394 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e01a      	b.n	800223a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2220      	movs	r2, #32
 800220a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <HAL_I2C_Master_Receive+0x1e8>)
 8002218:	400b      	ands	r3, r1
 800221a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
  }
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	80002400 	.word	0x80002400
 8002248:	fe00e800 	.word	0xfe00e800

0800224c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b02      	cmp	r3, #2
 8002260:	d103      	bne.n	800226a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d007      	beq.n	8002288 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	619a      	str	r2, [r3, #24]
  }
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a4:	e022      	b.n	80022ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ac:	d01e      	beq.n	80022ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ae:	f7fe ffb7 	bl	8001220 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d302      	bcc.n	80022c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d113      	bne.n	80022ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	f043 0220 	orr.w	r2, r3, #32
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e00f      	b.n	800230c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4013      	ands	r3, r2
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	429a      	cmp	r2, r3
 8002308:	d0cd      	beq.n	80022a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002320:	e02c      	b.n	800237c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f8dc 	bl	80024e4 <I2C_IsAcknowledgeFailed>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e02a      	b.n	800238c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800233c:	d01e      	beq.n	800237c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233e:	f7fe ff6f 	bl	8001220 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	429a      	cmp	r2, r3
 800234c:	d302      	bcc.n	8002354 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d113      	bne.n	800237c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	f043 0220 	orr.w	r2, r3, #32
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e007      	b.n	800238c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b02      	cmp	r3, #2
 8002388:	d1cb      	bne.n	8002322 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a0:	e028      	b.n	80023f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f89c 	bl	80024e4 <I2C_IsAcknowledgeFailed>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e026      	b.n	8002404 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b6:	f7fe ff33 	bl	8001220 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d302      	bcc.n	80023cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d113      	bne.n	80023f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	f043 0220 	orr.w	r2, r3, #32
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e007      	b.n	8002404 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d1cf      	bne.n	80023a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002418:	e055      	b.n	80024c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f860 	bl	80024e4 <I2C_IsAcknowledgeFailed>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e053      	b.n	80024d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b20      	cmp	r3, #32
 800243a:	d129      	bne.n	8002490 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b04      	cmp	r3, #4
 8002448:	d105      	bne.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e03f      	b.n	80024d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2220      	movs	r2, #32
 800245c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800246a:	400b      	ands	r3, r1
 800246c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e022      	b.n	80024d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002490:	f7fe fec6 	bl	8001220 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	429a      	cmp	r2, r3
 800249e:	d302      	bcc.n	80024a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f043 0220 	orr.w	r2, r3, #32
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e007      	b.n	80024d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d1a2      	bne.n	800241a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	fe00e800 	.word	0xfe00e800

080024e4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d151      	bne.n	80025a2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024fe:	e022      	b.n	8002546 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002506:	d01e      	beq.n	8002546 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002508:	f7fe fe8a 	bl	8001220 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	429a      	cmp	r2, r3
 8002516:	d302      	bcc.n	800251e <I2C_IsAcknowledgeFailed+0x3a>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d113      	bne.n	8002546 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f043 0220 	orr.w	r2, r3, #32
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e02e      	b.n	80025a4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b20      	cmp	r3, #32
 8002552:	d1d5      	bne.n	8002500 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2210      	movs	r2, #16
 800255a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2220      	movs	r2, #32
 8002562:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7ff fe71 	bl	800224c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <I2C_IsAcknowledgeFailed+0xc8>)
 8002576:	400b      	ands	r3, r1
 8002578:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f043 0204 	orr.w	r2, r3, #4
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	fe00e800 	.word	0xfe00e800

080025b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	460b      	mov	r3, r1
 80025bc:	817b      	strh	r3, [r7, #10]
 80025be:	4613      	mov	r3, r2
 80025c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	0d5b      	lsrs	r3, r3, #21
 80025cc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025d0:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <I2C_TransferConfig+0x58>)
 80025d2:	430b      	orrs	r3, r1
 80025d4:	43db      	mvns	r3, r3
 80025d6:	ea02 0103 	and.w	r1, r2, r3
 80025da:	897b      	ldrh	r3, [r7, #10]
 80025dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025e0:	7a7b      	ldrb	r3, [r7, #9]
 80025e2:	041b      	lsls	r3, r3, #16
 80025e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	03ff63ff 	.word	0x03ff63ff

0800260c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b20      	cmp	r3, #32
 8002620:	d138      	bne.n	8002694 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800262c:	2302      	movs	r3, #2
 800262e:	e032      	b.n	8002696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	; 0x24
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800265e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	e000      	b.n	8002696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002694:	2302      	movs	r3, #2
  }
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	d139      	bne.n	800272c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e033      	b.n	800272e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2224      	movs	r2, #36	; 0x24
 80026d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0201 	bic.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
  }
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_PWREx_GetVoltageRange+0x18>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40007000 	.word	0x40007000

08002758 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002766:	d130      	bne.n	80027ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002768:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002774:	d038      	beq.n	80027e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800277e:	4a1e      	ldr	r2, [pc, #120]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002780:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002784:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2232      	movs	r2, #50	; 0x32
 800278c:	fb02 f303 	mul.w	r3, r2, r3
 8002790:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	0c9b      	lsrs	r3, r3, #18
 8002798:	3301      	adds	r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800279c:	e002      	b.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a4:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b0:	d102      	bne.n	80027b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f2      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027b8:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c4:	d110      	bne.n	80027e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e00f      	b.n	80027ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d6:	d007      	beq.n	80027e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027d8:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027e0:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40007000 	.word	0x40007000
 80027fc:	2000000c 	.word	0x2000000c
 8002800:	431bde83 	.word	0x431bde83

08002804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e3d4      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002816:	4ba1      	ldr	r3, [pc, #644]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002820:	4b9e      	ldr	r3, [pc, #632]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80e4 	beq.w	8002a00 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <HAL_RCC_OscConfig+0x4a>
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b0c      	cmp	r3, #12
 8002842:	f040 808b 	bne.w	800295c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b01      	cmp	r3, #1
 800284a:	f040 8087 	bne.w	800295c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800284e:	4b93      	ldr	r3, [pc, #588]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_RCC_OscConfig+0x62>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e3ac      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1a      	ldr	r2, [r3, #32]
 800286a:	4b8c      	ldr	r3, [pc, #560]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <HAL_RCC_OscConfig+0x7c>
 8002876:	4b89      	ldr	r3, [pc, #548]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800287e:	e005      	b.n	800288c <HAL_RCC_OscConfig+0x88>
 8002880:	4b86      	ldr	r3, [pc, #536]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800288c:	4293      	cmp	r3, r2
 800288e:	d223      	bcs.n	80028d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fd41 	bl	800331c <RCC_SetFlashLatencyFromMSIRange>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e38d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028a4:	4b7d      	ldr	r3, [pc, #500]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a7c      	ldr	r2, [pc, #496]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80028aa:	f043 0308 	orr.w	r3, r3, #8
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b7a      	ldr	r3, [pc, #488]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	4977      	ldr	r1, [pc, #476]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028c2:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	4972      	ldr	r1, [pc, #456]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
 80028d6:	e025      	b.n	8002924 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028d8:	4b70      	ldr	r3, [pc, #448]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a6f      	ldr	r2, [pc, #444]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80028de:	f043 0308 	orr.w	r3, r3, #8
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4b6d      	ldr	r3, [pc, #436]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	496a      	ldr	r1, [pc, #424]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028f6:	4b69      	ldr	r3, [pc, #420]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	4965      	ldr	r1, [pc, #404]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fd01 	bl	800331c <RCC_SetFlashLatencyFromMSIRange>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e34d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002924:	f000 fc36 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b5c      	ldr	r3, [pc, #368]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	091b      	lsrs	r3, r3, #4
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	495a      	ldr	r1, [pc, #360]	; (8002aa0 <HAL_RCC_OscConfig+0x29c>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
 8002940:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <HAL_RCC_OscConfig+0x2a0>)
 8002942:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002944:	4b58      	ldr	r3, [pc, #352]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fc19 	bl	8001180 <HAL_InitTick>
 800294e:	4603      	mov	r3, r0
 8002950:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d052      	beq.n	80029fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	e331      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d032      	beq.n	80029ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002964:	4b4d      	ldr	r3, [pc, #308]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a4c      	ldr	r2, [pc, #304]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002970:	f7fe fc56 	bl	8001220 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002978:	f7fe fc52 	bl	8001220 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e31a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800298a:	4b44      	ldr	r3, [pc, #272]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002996:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a40      	ldr	r2, [pc, #256]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 800299c:	f043 0308 	orr.w	r3, r3, #8
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	4b3e      	ldr	r3, [pc, #248]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	493b      	ldr	r1, [pc, #236]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b4:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	4936      	ldr	r1, [pc, #216]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	e01a      	b.n	8002a00 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029ca:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a33      	ldr	r2, [pc, #204]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029d6:	f7fe fc23 	bl	8001220 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029de:	f7fe fc1f 	bl	8001220 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e2e7      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029f0:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x1da>
 80029fc:	e000      	b.n	8002a00 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d074      	beq.n	8002af6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d005      	beq.n	8002a1e <HAL_RCC_OscConfig+0x21a>
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	d10e      	bne.n	8002a36 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d10b      	bne.n	8002a36 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1e:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d064      	beq.n	8002af4 <HAL_RCC_OscConfig+0x2f0>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d160      	bne.n	8002af4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e2c4      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x24a>
 8002a40:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a15      	ldr	r2, [pc, #84]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	e01d      	b.n	8002a8a <HAL_RCC_OscConfig+0x286>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a56:	d10c      	bne.n	8002a72 <HAL_RCC_OscConfig+0x26e>
 8002a58:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	e00b      	b.n	8002a8a <HAL_RCC_OscConfig+0x286>
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a06      	ldr	r2, [pc, #24]	; (8002a9c <HAL_RCC_OscConfig+0x298>)
 8002a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01c      	beq.n	8002acc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a92:	f7fe fbc5 	bl	8001220 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a98:	e011      	b.n	8002abe <HAL_RCC_OscConfig+0x2ba>
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	08005ff0 	.word	0x08005ff0
 8002aa4:	2000000c 	.word	0x2000000c
 8002aa8:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aac:	f7fe fbb8 	bl	8001220 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e280      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002abe:	4baf      	ldr	r3, [pc, #700]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x2a8>
 8002aca:	e014      	b.n	8002af6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe fba8 	bl	8001220 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7fe fba4 	bl	8001220 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e26c      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ae6:	4ba5      	ldr	r3, [pc, #660]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x2d0>
 8002af2:	e000      	b.n	8002af6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d060      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_OscConfig+0x310>
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b0c      	cmp	r3, #12
 8002b0c:	d119      	bne.n	8002b42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d116      	bne.n	8002b42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b14:	4b99      	ldr	r3, [pc, #612]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_OscConfig+0x328>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e249      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b93      	ldr	r3, [pc, #588]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	4990      	ldr	r1, [pc, #576]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b40:	e040      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d023      	beq.n	8002b92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b4a:	4b8c      	ldr	r3, [pc, #560]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a8b      	ldr	r2, [pc, #556]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe fb63 	bl	8001220 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5e:	f7fe fb5f 	bl	8001220 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e227      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b70:	4b82      	ldr	r3, [pc, #520]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7c:	4b7f      	ldr	r3, [pc, #508]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	497c      	ldr	r1, [pc, #496]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
 8002b90:	e018      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b92:	4b7a      	ldr	r3, [pc, #488]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a79      	ldr	r2, [pc, #484]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fb3f 	bl	8001220 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba6:	f7fe fb3b 	bl	8001220 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e203      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bb8:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f0      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d03c      	beq.n	8002c4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01c      	beq.n	8002c12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd8:	4b68      	ldr	r3, [pc, #416]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bde:	4a67      	ldr	r2, [pc, #412]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe fb1a 	bl	8001220 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7fe fb16 	bl	8001220 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1de      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c02:	4b5e      	ldr	r3, [pc, #376]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0ef      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x3ec>
 8002c10:	e01b      	b.n	8002c4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c12:	4b5a      	ldr	r3, [pc, #360]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c18:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fe fafd 	bl	8001220 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2a:	f7fe faf9 	bl	8001220 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e1c1      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c3c:	4b4f      	ldr	r3, [pc, #316]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1ef      	bne.n	8002c2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80a6 	beq.w	8002da4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c5c:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10d      	bne.n	8002c84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c68:	4b44      	ldr	r3, [pc, #272]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6c:	4a43      	ldr	r2, [pc, #268]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c72:	6593      	str	r3, [r2, #88]	; 0x58
 8002c74:	4b41      	ldr	r3, [pc, #260]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c80:	2301      	movs	r3, #1
 8002c82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c84:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <HAL_RCC_OscConfig+0x57c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d118      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c90:	4b3b      	ldr	r3, [pc, #236]	; (8002d80 <HAL_RCC_OscConfig+0x57c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a3a      	ldr	r2, [pc, #232]	; (8002d80 <HAL_RCC_OscConfig+0x57c>)
 8002c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9c:	f7fe fac0 	bl	8001220 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca4:	f7fe fabc 	bl	8001220 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e184      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb6:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <HAL_RCC_OscConfig+0x57c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d108      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4d8>
 8002cca:	4b2c      	ldr	r3, [pc, #176]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	4a2a      	ldr	r2, [pc, #168]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cda:	e024      	b.n	8002d26 <HAL_RCC_OscConfig+0x522>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d110      	bne.n	8002d06 <HAL_RCC_OscConfig+0x502>
 8002ce4:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	4a24      	ldr	r2, [pc, #144]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002cec:	f043 0304 	orr.w	r3, r3, #4
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cf4:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	4a20      	ldr	r2, [pc, #128]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d04:	e00f      	b.n	8002d26 <HAL_RCC_OscConfig+0x522>
 8002d06:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	4a1b      	ldr	r2, [pc, #108]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d16:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1c:	4a17      	ldr	r2, [pc, #92]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002d1e:	f023 0304 	bic.w	r3, r3, #4
 8002d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d016      	beq.n	8002d5c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2e:	f7fe fa77 	bl	8001220 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d36:	f7fe fa73 	bl	8001220 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e139      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_OscConfig+0x578>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0ed      	beq.n	8002d36 <HAL_RCC_OscConfig+0x532>
 8002d5a:	e01a      	b.n	8002d92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7fe fa60 	bl	8001220 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d62:	e00f      	b.n	8002d84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d64:	f7fe fa5c 	bl	8001220 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d906      	bls.n	8002d84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e122      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d84:	4b90      	ldr	r3, [pc, #576]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e8      	bne.n	8002d64 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d92:	7ffb      	ldrb	r3, [r7, #31]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d105      	bne.n	8002da4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d98:	4b8b      	ldr	r3, [pc, #556]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	4a8a      	ldr	r2, [pc, #552]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8108 	beq.w	8002fbe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	f040 80d0 	bne.w	8002f58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002db8:	4b83      	ldr	r3, [pc, #524]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f003 0203 	and.w	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d130      	bne.n	8002e2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d127      	bne.n	8002e2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d11f      	bne.n	8002e2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002df8:	2a07      	cmp	r2, #7
 8002dfa:	bf14      	ite	ne
 8002dfc:	2201      	movne	r2, #1
 8002dfe:	2200      	moveq	r2, #0
 8002e00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d113      	bne.n	8002e2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e10:	085b      	lsrs	r3, r3, #1
 8002e12:	3b01      	subs	r3, #1
 8002e14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d109      	bne.n	8002e2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	085b      	lsrs	r3, r3, #1
 8002e26:	3b01      	subs	r3, #1
 8002e28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d06e      	beq.n	8002f0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b0c      	cmp	r3, #12
 8002e32:	d069      	beq.n	8002f08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e34:	4b64      	ldr	r3, [pc, #400]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d105      	bne.n	8002e4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0b7      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e50:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a5c      	ldr	r2, [pc, #368]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e5c:	f7fe f9e0 	bl	8001220 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fe f9dc 	bl	8001220 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e0a4      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e76:	4b54      	ldr	r3, [pc, #336]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e82:	4b51      	ldr	r3, [pc, #324]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	4b51      	ldr	r3, [pc, #324]	; (8002fcc <HAL_RCC_OscConfig+0x7c8>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e92:	3a01      	subs	r2, #1
 8002e94:	0112      	lsls	r2, r2, #4
 8002e96:	4311      	orrs	r1, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e9c:	0212      	lsls	r2, r2, #8
 8002e9e:	4311      	orrs	r1, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ea4:	0852      	lsrs	r2, r2, #1
 8002ea6:	3a01      	subs	r2, #1
 8002ea8:	0552      	lsls	r2, r2, #21
 8002eaa:	4311      	orrs	r1, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002eb0:	0852      	lsrs	r2, r2, #1
 8002eb2:	3a01      	subs	r2, #1
 8002eb4:	0652      	lsls	r2, r2, #25
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ebc:	0912      	lsrs	r2, r2, #4
 8002ebe:	0452      	lsls	r2, r2, #17
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	4941      	ldr	r1, [pc, #260]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ec8:	4b3f      	ldr	r3, [pc, #252]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a3e      	ldr	r2, [pc, #248]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ed4:	4b3c      	ldr	r3, [pc, #240]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4a3b      	ldr	r2, [pc, #236]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ede:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ee0:	f7fe f99e 	bl	8001220 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fe f99a 	bl	8001220 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e062      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efa:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f06:	e05a      	b.n	8002fbe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e059      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0c:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d152      	bne.n	8002fbe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f18:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a2a      	ldr	r2, [pc, #168]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f24:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a27      	ldr	r2, [pc, #156]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f30:	f7fe f976 	bl	8001220 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe f972 	bl	8001220 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e03a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4a:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x734>
 8002f56:	e032      	b.n	8002fbe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d02d      	beq.n	8002fba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002f64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f68:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f76:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002f7c:	f023 0303 	bic.w	r3, r3, #3
 8002f80:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	4a10      	ldr	r2, [pc, #64]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002f88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f90:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fe f945 	bl	8001220 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fe f941 	bl	8001220 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e009      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_OscConfig+0x7c4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f0      	bne.n	8002f9a <HAL_RCC_OscConfig+0x796>
 8002fb8:	e001      	b.n	8002fbe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	f99d808c 	.word	0xf99d808c

08002fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0c8      	b.n	8003176 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b66      	ldr	r3, [pc, #408]	; (8003180 <HAL_RCC_ClockConfig+0x1b0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d910      	bls.n	8003014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b63      	ldr	r3, [pc, #396]	; (8003180 <HAL_RCC_ClockConfig+0x1b0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 0207 	bic.w	r2, r3, #7
 8002ffa:	4961      	ldr	r1, [pc, #388]	; (8003180 <HAL_RCC_ClockConfig+0x1b0>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <HAL_RCC_ClockConfig+0x1b0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0b0      	b.n	8003176 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d04c      	beq.n	80030ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d107      	bne.n	8003038 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003028:	4b56      	ldr	r3, [pc, #344]	; (8003184 <HAL_RCC_ClockConfig+0x1b4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d121      	bne.n	8003078 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e09e      	b.n	8003176 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d107      	bne.n	8003050 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003040:	4b50      	ldr	r3, [pc, #320]	; (8003184 <HAL_RCC_ClockConfig+0x1b4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d115      	bne.n	8003078 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e092      	b.n	8003176 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003058:	4b4a      	ldr	r3, [pc, #296]	; (8003184 <HAL_RCC_ClockConfig+0x1b4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e086      	b.n	8003176 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003068:	4b46      	ldr	r3, [pc, #280]	; (8003184 <HAL_RCC_ClockConfig+0x1b4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e07e      	b.n	8003176 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003078:	4b42      	ldr	r3, [pc, #264]	; (8003184 <HAL_RCC_ClockConfig+0x1b4>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 0203 	bic.w	r2, r3, #3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	493f      	ldr	r1, [pc, #252]	; (8003184 <HAL_RCC_ClockConfig+0x1b4>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800308a:	f7fe f8c9 	bl	8001220 <HAL_GetTick>
 800308e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003092:	f7fe f8c5 	bl	8001220 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e066      	b.n	8003176 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <HAL_RCC_ClockConfig+0x1b4>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 020c 	and.w	r2, r3, #12
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d1eb      	bne.n	8003092 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d008      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c6:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <HAL_RCC_ClockConfig+0x1b4>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	492c      	ldr	r1, [pc, #176]	; (8003184 <HAL_RCC_ClockConfig+0x1b4>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d8:	4b29      	ldr	r3, [pc, #164]	; (8003180 <HAL_RCC_ClockConfig+0x1b0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d210      	bcs.n	8003108 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b26      	ldr	r3, [pc, #152]	; (8003180 <HAL_RCC_ClockConfig+0x1b0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 0207 	bic.w	r2, r3, #7
 80030ee:	4924      	ldr	r1, [pc, #144]	; (8003180 <HAL_RCC_ClockConfig+0x1b0>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <HAL_RCC_ClockConfig+0x1b0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e036      	b.n	8003176 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <HAL_RCC_ClockConfig+0x1b4>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4918      	ldr	r1, [pc, #96]	; (8003184 <HAL_RCC_ClockConfig+0x1b4>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <HAL_RCC_ClockConfig+0x1b4>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4910      	ldr	r1, [pc, #64]	; (8003184 <HAL_RCC_ClockConfig+0x1b4>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003146:	f000 f825 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 800314a:	4602      	mov	r2, r0
 800314c:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <HAL_RCC_ClockConfig+0x1b4>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	490c      	ldr	r1, [pc, #48]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	5ccb      	ldrb	r3, [r1, r3]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe f808 	bl	8001180 <HAL_InitTick>
 8003170:	4603      	mov	r3, r0
 8003172:	72fb      	strb	r3, [r7, #11]

  return status;
 8003174:	7afb      	ldrb	r3, [r7, #11]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40022000 	.word	0x40022000
 8003184:	40021000 	.word	0x40021000
 8003188:	08005ff0 	.word	0x08005ff0
 800318c:	2000000c 	.word	0x2000000c
 8003190:	20000010 	.word	0x20000010

08003194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031a2:	4b3e      	ldr	r3, [pc, #248]	; (800329c <HAL_RCC_GetSysClockFreq+0x108>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031ac:	4b3b      	ldr	r3, [pc, #236]	; (800329c <HAL_RCC_GetSysClockFreq+0x108>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x34>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d121      	bne.n	8003206 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d11e      	bne.n	8003206 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031c8:	4b34      	ldr	r3, [pc, #208]	; (800329c <HAL_RCC_GetSysClockFreq+0x108>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031d4:	4b31      	ldr	r3, [pc, #196]	; (800329c <HAL_RCC_GetSysClockFreq+0x108>)
 80031d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	e005      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031e4:	4b2d      	ldr	r3, [pc, #180]	; (800329c <HAL_RCC_GetSysClockFreq+0x108>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031f0:	4a2b      	ldr	r2, [pc, #172]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10d      	bne.n	800321c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003204:	e00a      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b04      	cmp	r3, #4
 800320a:	d102      	bne.n	8003212 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800320c:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	e004      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d101      	bne.n	800321c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003218:	4b23      	ldr	r3, [pc, #140]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800321a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d134      	bne.n	800328c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003222:	4b1e      	ldr	r3, [pc, #120]	; (800329c <HAL_RCC_GetSysClockFreq+0x108>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d003      	beq.n	800323a <HAL_RCC_GetSysClockFreq+0xa6>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d003      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0xac>
 8003238:	e005      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800323a:	4b1a      	ldr	r3, [pc, #104]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800323c:	617b      	str	r3, [r7, #20]
      break;
 800323e:	e005      	b.n	800324c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003242:	617b      	str	r3, [r7, #20]
      break;
 8003244:	e002      	b.n	800324c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	617b      	str	r3, [r7, #20]
      break;
 800324a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800324c:	4b13      	ldr	r3, [pc, #76]	; (800329c <HAL_RCC_GetSysClockFreq+0x108>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	3301      	adds	r3, #1
 8003258:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_RCC_GetSysClockFreq+0x108>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	fb02 f203 	mul.w	r2, r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <HAL_RCC_GetSysClockFreq+0x108>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	0e5b      	lsrs	r3, r3, #25
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	3301      	adds	r3, #1
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800328c:	69bb      	ldr	r3, [r7, #24]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3724      	adds	r7, #36	; 0x24
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40021000 	.word	0x40021000
 80032a0:	08006008 	.word	0x08006008
 80032a4:	00f42400 	.word	0x00f42400
 80032a8:	007a1200 	.word	0x007a1200

080032ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b0:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	2000000c 	.word	0x2000000c

080032c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032c8:	f7ff fff0 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0a1b      	lsrs	r3, r3, #8
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4904      	ldr	r1, [pc, #16]	; (80032ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000
 80032ec:	08006000 	.word	0x08006000

080032f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032f4:	f7ff ffda 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	0adb      	lsrs	r3, r3, #11
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4904      	ldr	r1, [pc, #16]	; (8003318 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40021000 	.word	0x40021000
 8003318:	08006000 	.word	0x08006000

0800331c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003328:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003334:	f7ff fa02 	bl	800273c <HAL_PWREx_GetVoltageRange>
 8003338:	6178      	str	r0, [r7, #20]
 800333a:	e014      	b.n	8003366 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800333c:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003346:	6593      	str	r3, [r2, #88]	; 0x58
 8003348:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003354:	f7ff f9f2 	bl	800273c <HAL_PWREx_GetVoltageRange>
 8003358:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800335a:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003364:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336c:	d10b      	bne.n	8003386 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b80      	cmp	r3, #128	; 0x80
 8003372:	d919      	bls.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2ba0      	cmp	r3, #160	; 0xa0
 8003378:	d902      	bls.n	8003380 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800337a:	2302      	movs	r3, #2
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	e013      	b.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003380:	2301      	movs	r3, #1
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	e010      	b.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b80      	cmp	r3, #128	; 0x80
 800338a:	d902      	bls.n	8003392 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800338c:	2303      	movs	r3, #3
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	e00a      	b.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b80      	cmp	r3, #128	; 0x80
 8003396:	d102      	bne.n	800339e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003398:	2302      	movs	r3, #2
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	e004      	b.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b70      	cmp	r3, #112	; 0x70
 80033a2:	d101      	bne.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033a4:	2301      	movs	r3, #1
 80033a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 0207 	bic.w	r2, r3, #7
 80033b0:	4909      	ldr	r1, [pc, #36]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033b8:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d001      	beq.n	80033ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40022000 	.word	0x40022000

080033dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033e4:	2300      	movs	r3, #0
 80033e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033e8:	2300      	movs	r3, #0
 80033ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d041      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003400:	d02a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003402:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003406:	d824      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003408:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800340c:	d008      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800340e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003412:	d81e      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341c:	d010      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800341e:	e018      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003420:	4b86      	ldr	r3, [pc, #536]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a85      	ldr	r2, [pc, #532]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800342c:	e015      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3304      	adds	r3, #4
 8003432:	2100      	movs	r1, #0
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fabb 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800343e:	e00c      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3320      	adds	r3, #32
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fba6 	bl	8003b98 <RCCEx_PLLSAI2_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003450:	e003      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	74fb      	strb	r3, [r7, #19]
      break;
 8003456:	e000      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800345a:	7cfb      	ldrb	r3, [r7, #19]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10b      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003460:	4b76      	ldr	r3, [pc, #472]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003466:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800346e:	4973      	ldr	r1, [pc, #460]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003476:	e001      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d041      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003490:	d02a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003492:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003496:	d824      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003498:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800349c:	d008      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800349e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034a2:	d81e      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80034a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ac:	d010      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034ae:	e018      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034b0:	4b62      	ldr	r3, [pc, #392]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a61      	ldr	r2, [pc, #388]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034bc:	e015      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fa73 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ce:	e00c      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3320      	adds	r3, #32
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fb5e 	bl	8003b98 <RCCEx_PLLSAI2_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034e0:	e003      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	74fb      	strb	r3, [r7, #19]
      break;
 80034e6:	e000      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80034e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034f0:	4b52      	ldr	r3, [pc, #328]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034fe:	494f      	ldr	r1, [pc, #316]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003506:	e001      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80a0 	beq.w	800365a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351a:	2300      	movs	r3, #0
 800351c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800351e:	4b47      	ldr	r3, [pc, #284]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800352e:	2300      	movs	r3, #0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00d      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003534:	4b41      	ldr	r3, [pc, #260]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	4a40      	ldr	r2, [pc, #256]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353e:	6593      	str	r3, [r2, #88]	; 0x58
 8003540:	4b3e      	ldr	r3, [pc, #248]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354c:	2301      	movs	r3, #1
 800354e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003550:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a3a      	ldr	r2, [pc, #232]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800355c:	f7fd fe60 	bl	8001220 <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003562:	e009      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003564:	f7fd fe5c 	bl	8001220 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d902      	bls.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	74fb      	strb	r3, [r7, #19]
        break;
 8003576:	e005      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003578:	4b31      	ldr	r3, [pc, #196]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ef      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d15c      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800358a:	4b2c      	ldr	r3, [pc, #176]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003594:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01f      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d019      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035b4:	4b21      	ldr	r3, [pc, #132]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	4a20      	ldr	r2, [pc, #128]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	4a1c      	ldr	r2, [pc, #112]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035d4:	4a19      	ldr	r2, [pc, #100]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e6:	f7fd fe1b 	bl	8001220 <HAL_GetTick>
 80035ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ec:	e00b      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fd fe17 	bl	8001220 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d902      	bls.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	74fb      	strb	r3, [r7, #19]
            break;
 8003604:	e006      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003606:	4b0d      	ldr	r3, [pc, #52]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0ec      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10c      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800361a:	4b08      	ldr	r3, [pc, #32]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800362a:	4904      	ldr	r1, [pc, #16]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003632:	e009      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	74bb      	strb	r3, [r7, #18]
 8003638:	e006      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003648:	7c7b      	ldrb	r3, [r7, #17]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d105      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364e:	4b9e      	ldr	r3, [pc, #632]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	4a9d      	ldr	r2, [pc, #628]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003658:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003666:	4b98      	ldr	r3, [pc, #608]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366c:	f023 0203 	bic.w	r2, r3, #3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	4994      	ldr	r1, [pc, #592]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003688:	4b8f      	ldr	r3, [pc, #572]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368e:	f023 020c 	bic.w	r2, r3, #12
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003696:	498c      	ldr	r1, [pc, #560]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036aa:	4b87      	ldr	r3, [pc, #540]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	4983      	ldr	r1, [pc, #524]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036cc:	4b7e      	ldr	r3, [pc, #504]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	497b      	ldr	r1, [pc, #492]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036ee:	4b76      	ldr	r3, [pc, #472]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fc:	4972      	ldr	r1, [pc, #456]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003710:	4b6d      	ldr	r3, [pc, #436]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371e:	496a      	ldr	r1, [pc, #424]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003732:	4b65      	ldr	r3, [pc, #404]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003738:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003740:	4961      	ldr	r1, [pc, #388]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003754:	4b5c      	ldr	r3, [pc, #368]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003762:	4959      	ldr	r1, [pc, #356]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003776:	4b54      	ldr	r3, [pc, #336]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003784:	4950      	ldr	r1, [pc, #320]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003798:	4b4b      	ldr	r3, [pc, #300]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	4948      	ldr	r1, [pc, #288]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ba:	4b43      	ldr	r3, [pc, #268]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	493f      	ldr	r1, [pc, #252]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d028      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037dc:	4b3a      	ldr	r3, [pc, #232]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ea:	4937      	ldr	r1, [pc, #220]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037fa:	d106      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037fc:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4a31      	ldr	r2, [pc, #196]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003806:	60d3      	str	r3, [r2, #12]
 8003808:	e011      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003812:	d10c      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	2101      	movs	r1, #1
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f8c8 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d028      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800383a:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003840:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	491f      	ldr	r1, [pc, #124]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003858:	d106      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800385a:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003864:	60d3      	str	r3, [r2, #12]
 8003866:	e011      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003870:	d10c      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3304      	adds	r3, #4
 8003876:	2101      	movs	r1, #1
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f899 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003888:	7cfb      	ldrb	r3, [r7, #19]
 800388a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02b      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a6:	4908      	ldr	r1, [pc, #32]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038b6:	d109      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4a02      	ldr	r2, [pc, #8]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038c2:	60d3      	str	r3, [r2, #12]
 80038c4:	e014      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	2101      	movs	r1, #1
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 f867 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038e6:	7cfb      	ldrb	r3, [r7, #19]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80038ec:	7cfb      	ldrb	r3, [r7, #19]
 80038ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d02f      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038fc:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800390a:	4928      	ldr	r1, [pc, #160]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800391a:	d10d      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	2102      	movs	r1, #2
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f844 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800392c:	7cfb      	ldrb	r3, [r7, #19]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d014      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003932:	7cfb      	ldrb	r3, [r7, #19]
 8003934:	74bb      	strb	r3, [r7, #18]
 8003936:	e011      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800393c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003940:	d10c      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3320      	adds	r3, #32
 8003946:	2102      	movs	r1, #2
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f925 	bl	8003b98 <RCCEx_PLLSAI2_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003952:	7cfb      	ldrb	r3, [r7, #19]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003968:	4b10      	ldr	r3, [pc, #64]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003976:	490d      	ldr	r1, [pc, #52]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800399a:	4904      	ldr	r1, [pc, #16]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000

080039b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039be:	4b75      	ldr	r3, [pc, #468]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d018      	beq.n	80039fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039ca:	4b72      	ldr	r3, [pc, #456]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0203 	and.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d10d      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
       ||
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039e2:	4b6c      	ldr	r3, [pc, #432]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
       ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d047      	beq.n	8003a86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
 80039fa:	e044      	b.n	8003a86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d018      	beq.n	8003a36 <RCCEx_PLLSAI1_Config+0x86>
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d825      	bhi.n	8003a54 <RCCEx_PLLSAI1_Config+0xa4>
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d002      	beq.n	8003a12 <RCCEx_PLLSAI1_Config+0x62>
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d009      	beq.n	8003a24 <RCCEx_PLLSAI1_Config+0x74>
 8003a10:	e020      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a12:	4b60      	ldr	r3, [pc, #384]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11d      	bne.n	8003a5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a22:	e01a      	b.n	8003a5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a24:	4b5b      	ldr	r3, [pc, #364]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d116      	bne.n	8003a5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a34:	e013      	b.n	8003a5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a36:	4b57      	ldr	r3, [pc, #348]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10f      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a42:	4b54      	ldr	r3, [pc, #336]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a52:	e006      	b.n	8003a62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      break;
 8003a58:	e004      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e002      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e000      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a62:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10d      	bne.n	8003a86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	4944      	ldr	r1, [pc, #272]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d17d      	bne.n	8003b88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a8c:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a40      	ldr	r2, [pc, #256]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a98:	f7fd fbc2 	bl	8001220 <HAL_GetTick>
 8003a9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a9e:	e009      	b.n	8003ab4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aa0:	f7fd fbbe 	bl	8001220 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d902      	bls.n	8003ab4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ab2:	e005      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ab4:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ef      	bne.n	8003aa0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d160      	bne.n	8003b88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d111      	bne.n	8003af0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003acc:	4b31      	ldr	r3, [pc, #196]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6892      	ldr	r2, [r2, #8]
 8003adc:	0211      	lsls	r1, r2, #8
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68d2      	ldr	r2, [r2, #12]
 8003ae2:	0912      	lsrs	r2, r2, #4
 8003ae4:	0452      	lsls	r2, r2, #17
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	492a      	ldr	r1, [pc, #168]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	610b      	str	r3, [r1, #16]
 8003aee:	e027      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d112      	bne.n	8003b1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003af6:	4b27      	ldr	r3, [pc, #156]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003afe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6892      	ldr	r2, [r2, #8]
 8003b06:	0211      	lsls	r1, r2, #8
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6912      	ldr	r2, [r2, #16]
 8003b0c:	0852      	lsrs	r2, r2, #1
 8003b0e:	3a01      	subs	r2, #1
 8003b10:	0552      	lsls	r2, r2, #21
 8003b12:	430a      	orrs	r2, r1
 8003b14:	491f      	ldr	r1, [pc, #124]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	610b      	str	r3, [r1, #16]
 8003b1a:	e011      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b1c:	4b1d      	ldr	r3, [pc, #116]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6892      	ldr	r2, [r2, #8]
 8003b2c:	0211      	lsls	r1, r2, #8
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6952      	ldr	r2, [r2, #20]
 8003b32:	0852      	lsrs	r2, r2, #1
 8003b34:	3a01      	subs	r2, #1
 8003b36:	0652      	lsls	r2, r2, #25
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	4916      	ldr	r1, [pc, #88]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b40:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fd fb68 	bl	8001220 <HAL_GetTick>
 8003b50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b52:	e009      	b.n	8003b68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b54:	f7fd fb64 	bl	8001220 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d902      	bls.n	8003b68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	73fb      	strb	r3, [r7, #15]
          break;
 8003b66:	e005      	b.n	8003b74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b68:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ef      	beq.n	8003b54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b7a:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	4904      	ldr	r1, [pc, #16]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000

08003b98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ba6:	4b6a      	ldr	r3, [pc, #424]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d018      	beq.n	8003be4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bb2:	4b67      	ldr	r3, [pc, #412]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0203 	and.w	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d10d      	bne.n	8003bde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
       ||
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bca:	4b61      	ldr	r3, [pc, #388]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
       ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d047      	beq.n	8003c6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
 8003be2:	e044      	b.n	8003c6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d018      	beq.n	8003c1e <RCCEx_PLLSAI2_Config+0x86>
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d825      	bhi.n	8003c3c <RCCEx_PLLSAI2_Config+0xa4>
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d002      	beq.n	8003bfa <RCCEx_PLLSAI2_Config+0x62>
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d009      	beq.n	8003c0c <RCCEx_PLLSAI2_Config+0x74>
 8003bf8:	e020      	b.n	8003c3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bfa:	4b55      	ldr	r3, [pc, #340]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d11d      	bne.n	8003c42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0a:	e01a      	b.n	8003c42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c0c:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d116      	bne.n	8003c46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c1c:	e013      	b.n	8003c46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c1e:	4b4c      	ldr	r3, [pc, #304]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c2a:	4b49      	ldr	r3, [pc, #292]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c3a:	e006      	b.n	8003c4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c40:	e004      	b.n	8003c4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c42:	bf00      	nop
 8003c44:	e002      	b.n	8003c4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c46:	bf00      	nop
 8003c48:	e000      	b.n	8003c4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10d      	bne.n	8003c6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c52:	4b3f      	ldr	r3, [pc, #252]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6819      	ldr	r1, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	430b      	orrs	r3, r1
 8003c68:	4939      	ldr	r1, [pc, #228]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d167      	bne.n	8003d44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a35      	ldr	r2, [pc, #212]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c80:	f7fd face 	bl	8001220 <HAL_GetTick>
 8003c84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c86:	e009      	b.n	8003c9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c88:	f7fd faca 	bl	8001220 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d902      	bls.n	8003c9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	73fb      	strb	r3, [r7, #15]
        break;
 8003c9a:	e005      	b.n	8003ca8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c9c:	4b2c      	ldr	r3, [pc, #176]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1ef      	bne.n	8003c88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d14a      	bne.n	8003d44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d111      	bne.n	8003cd8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cb4:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6892      	ldr	r2, [r2, #8]
 8003cc4:	0211      	lsls	r1, r2, #8
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68d2      	ldr	r2, [r2, #12]
 8003cca:	0912      	lsrs	r2, r2, #4
 8003ccc:	0452      	lsls	r2, r2, #17
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	491f      	ldr	r1, [pc, #124]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	614b      	str	r3, [r1, #20]
 8003cd6:	e011      	b.n	8003cfc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cd8:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ce0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6892      	ldr	r2, [r2, #8]
 8003ce8:	0211      	lsls	r1, r2, #8
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6912      	ldr	r2, [r2, #16]
 8003cee:	0852      	lsrs	r2, r2, #1
 8003cf0:	3a01      	subs	r2, #1
 8003cf2:	0652      	lsls	r2, r2, #25
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	4916      	ldr	r1, [pc, #88]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cfc:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a13      	ldr	r2, [pc, #76]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fd fa8a 	bl	8001220 <HAL_GetTick>
 8003d0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d0e:	e009      	b.n	8003d24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d10:	f7fd fa86 	bl	8001220 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d902      	bls.n	8003d24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	73fb      	strb	r3, [r7, #15]
          break;
 8003d22:	e005      	b.n	8003d30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0ef      	beq.n	8003d10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	4904      	ldr	r1, [pc, #16]	; (8003d50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000

08003d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e040      	b.n	8003de8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fd f908 	bl	8000f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2224      	movs	r2, #36	; 0x24
 8003d80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fb26 	bl	80043e4 <UART_SetConfig>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e022      	b.n	8003de8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fda4 	bl	80048f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fe2b 	bl	8004a3c <UART_CheckIdleState>
 8003de6:	4603      	mov	r3, r0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08a      	sub	sp, #40	; 0x28
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	f040 8082 	bne.w	8003f0e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_UART_Transmit+0x26>
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e07a      	b.n	8003f10 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_UART_Transmit+0x38>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e073      	b.n	8003f10 <HAL_UART_Transmit+0x120>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2221      	movs	r2, #33	; 0x21
 8003e3c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e3e:	f7fd f9ef 	bl	8001220 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	d108      	bne.n	8003e70 <HAL_UART_Transmit+0x80>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	e003      	b.n	8003e78 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003e80:	e02d      	b.n	8003ede <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2180      	movs	r1, #128	; 0x80
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fe1e 	bl	8004ace <UART_WaitOnFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e039      	b.n	8003f10 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10b      	bne.n	8003eba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	881a      	ldrh	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eae:	b292      	uxth	r2, r2
 8003eb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	e008      	b.n	8003ecc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	781a      	ldrb	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	b292      	uxth	r2, r2
 8003ec4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1cb      	bne.n	8003e82 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2140      	movs	r1, #64	; 0x40
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 fdea 	bl	8004ace <UART_WaitOnFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e005      	b.n	8003f10 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e000      	b.n	8003f10 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f0e:	2302      	movs	r3, #2
  }
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3720      	adds	r7, #32
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d131      	bne.n	8003f92 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_UART_Receive_IT+0x22>
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e02a      	b.n	8003f94 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_UART_Receive_IT+0x34>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e023      	b.n	8003f94 <HAL_UART_Receive_IT+0x7c>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a0f      	ldr	r2, [pc, #60]	; (8003f9c <HAL_UART_Receive_IT+0x84>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00e      	beq.n	8003f82 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f80:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	461a      	mov	r2, r3
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fe1d 	bl	8004bc8 <UART_Start_Receive_IT>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	e000      	b.n	8003f94 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003f92:	2302      	movs	r3, #2
  }
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40008000 	.word	0x40008000

08003fa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d113      	bne.n	8003ff8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00e      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d009      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 81ce 	beq.w	800438a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
      }
      return;
 8003ff6:	e1c8      	b.n	800438a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 80e3 	beq.w	80041c6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d105      	bne.n	8004016 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4ba6      	ldr	r3, [pc, #664]	; (80042a8 <HAL_UART_IRQHandler+0x308>)
 800400e:	4013      	ands	r3, r2
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80d8 	beq.w	80041c6 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d010      	beq.n	8004042 <HAL_UART_IRQHandler+0xa2>
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2201      	movs	r2, #1
 8004030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004038:	f043 0201 	orr.w	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d010      	beq.n	800406e <HAL_UART_IRQHandler+0xce>
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00b      	beq.n	800406e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2202      	movs	r2, #2
 800405c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004064:	f043 0204 	orr.w	r2, r3, #4
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d010      	beq.n	800409a <HAL_UART_IRQHandler+0xfa>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2204      	movs	r2, #4
 8004088:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004090:	f043 0202 	orr.w	r2, r3, #2
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d015      	beq.n	80040d0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00b      	beq.n	80040d0 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2208      	movs	r2, #8
 80040be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c6:	f043 0208 	orr.w	r2, r3, #8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d011      	beq.n	80040fe <HAL_UART_IRQHandler+0x15e>
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00c      	beq.n	80040fe <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040f4:	f043 0220 	orr.w	r2, r3, #32
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8142 	beq.w	800438e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00c      	beq.n	800412e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004134:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d004      	beq.n	800414e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800414a:	2b00      	cmp	r3, #0
 800414c:	d031      	beq.n	80041b2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fdc2 	bl	8004cd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415e:	2b40      	cmp	r3, #64	; 0x40
 8004160:	d123      	bne.n	80041aa <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004170:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	2b00      	cmp	r3, #0
 8004178:	d013      	beq.n	80041a2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	4a4b      	ldr	r2, [pc, #300]	; (80042ac <HAL_UART_IRQHandler+0x30c>)
 8004180:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	4618      	mov	r0, r3
 8004188:	f7fd fbe3 	bl	8001952 <HAL_DMA_Abort_IT>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d017      	beq.n	80041c2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800419c:	4610      	mov	r0, r2
 800419e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a0:	e00f      	b.n	80041c2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f908 	bl	80043b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a8:	e00b      	b.n	80041c2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f904 	bl	80043b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b0:	e007      	b.n	80041c2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f900 	bl	80043b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80041c0:	e0e5      	b.n	800438e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c2:	bf00      	nop
    return;
 80041c4:	e0e3      	b.n	800438e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	f040 80a9 	bne.w	8004322 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80a3 	beq.w	8004322 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 809d 	beq.w	8004322 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2210      	movs	r2, #16
 80041ee:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d158      	bne.n	80042b0 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004208:	893b      	ldrh	r3, [r7, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80c1 	beq.w	8004392 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004216:	893a      	ldrh	r2, [r7, #8]
 8004218:	429a      	cmp	r2, r3
 800421a:	f080 80ba 	bcs.w	8004392 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	893a      	ldrh	r2, [r7, #8]
 8004222:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d12a      	bne.n	800428c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004244:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004264:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0210 	bic.w	r2, r2, #16
 8004280:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	4618      	mov	r0, r3
 8004288:	f7fd fb25 	bl	80018d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004298:	b29b      	uxth	r3, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	b29b      	uxth	r3, r3
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f893 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80042a6:	e074      	b.n	8004392 <HAL_UART_IRQHandler+0x3f2>
 80042a8:	04000120 	.word	0x04000120
 80042ac:	08004d37 	.word	0x08004d37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d063      	beq.n	8004396 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80042ce:	897b      	ldrh	r3, [r7, #10]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d060      	beq.n	8004396 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042e2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0201 	bic.w	r2, r2, #1
 80042f2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0210 	bic.w	r2, r2, #16
 8004314:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004316:	897b      	ldrh	r3, [r7, #10]
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f856 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004320:	e039      	b.n	8004396 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00d      	beq.n	8004348 <HAL_UART_IRQHandler+0x3a8>
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800433e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fdff 	bl	8004f44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004346:	e029      	b.n	800439c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00d      	beq.n	800436e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01a      	beq.n	800439a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4798      	blx	r3
    }
    return;
 800436c:	e015      	b.n	800439a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d011      	beq.n	800439c <HAL_UART_IRQHandler+0x3fc>
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00c      	beq.n	800439c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fced 	bl	8004d62 <UART_EndTransmit_IT>
    return;
 8004388:	e008      	b.n	800439c <HAL_UART_IRQHandler+0x3fc>
      return;
 800438a:	bf00      	nop
 800438c:	e006      	b.n	800439c <HAL_UART_IRQHandler+0x3fc>
    return;
 800438e:	bf00      	nop
 8004390:	e004      	b.n	800439c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004392:	bf00      	nop
 8004394:	e002      	b.n	800439c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004396:	bf00      	nop
 8004398:	e000      	b.n	800439c <HAL_UART_IRQHandler+0x3fc>
    return;
 800439a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop

080043a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e4:	b5b0      	push	{r4, r5, r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	4313      	orrs	r3, r2
 8004406:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4bad      	ldr	r3, [pc, #692]	; (80046c4 <UART_SetConfig+0x2e0>)
 8004410:	4013      	ands	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	69f9      	ldr	r1, [r7, #28]
 8004418:	430b      	orrs	r3, r1
 800441a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4aa2      	ldr	r2, [pc, #648]	; (80046c8 <UART_SetConfig+0x2e4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	69fa      	ldr	r2, [r7, #28]
 8004448:	4313      	orrs	r3, r2
 800444a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	430a      	orrs	r2, r1
 800445e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a99      	ldr	r2, [pc, #612]	; (80046cc <UART_SetConfig+0x2e8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d121      	bne.n	80044ae <UART_SetConfig+0xca>
 800446a:	4b99      	ldr	r3, [pc, #612]	; (80046d0 <UART_SetConfig+0x2ec>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b03      	cmp	r3, #3
 8004476:	d817      	bhi.n	80044a8 <UART_SetConfig+0xc4>
 8004478:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <UART_SetConfig+0x9c>)
 800447a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447e:	bf00      	nop
 8004480:	08004491 	.word	0x08004491
 8004484:	0800449d 	.word	0x0800449d
 8004488:	08004497 	.word	0x08004497
 800448c:	080044a3 	.word	0x080044a3
 8004490:	2301      	movs	r3, #1
 8004492:	76fb      	strb	r3, [r7, #27]
 8004494:	e0e7      	b.n	8004666 <UART_SetConfig+0x282>
 8004496:	2302      	movs	r3, #2
 8004498:	76fb      	strb	r3, [r7, #27]
 800449a:	e0e4      	b.n	8004666 <UART_SetConfig+0x282>
 800449c:	2304      	movs	r3, #4
 800449e:	76fb      	strb	r3, [r7, #27]
 80044a0:	e0e1      	b.n	8004666 <UART_SetConfig+0x282>
 80044a2:	2308      	movs	r3, #8
 80044a4:	76fb      	strb	r3, [r7, #27]
 80044a6:	e0de      	b.n	8004666 <UART_SetConfig+0x282>
 80044a8:	2310      	movs	r3, #16
 80044aa:	76fb      	strb	r3, [r7, #27]
 80044ac:	e0db      	b.n	8004666 <UART_SetConfig+0x282>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a88      	ldr	r2, [pc, #544]	; (80046d4 <UART_SetConfig+0x2f0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d132      	bne.n	800451e <UART_SetConfig+0x13a>
 80044b8:	4b85      	ldr	r3, [pc, #532]	; (80046d0 <UART_SetConfig+0x2ec>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b0c      	cmp	r3, #12
 80044c4:	d828      	bhi.n	8004518 <UART_SetConfig+0x134>
 80044c6:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <UART_SetConfig+0xe8>)
 80044c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044cc:	08004501 	.word	0x08004501
 80044d0:	08004519 	.word	0x08004519
 80044d4:	08004519 	.word	0x08004519
 80044d8:	08004519 	.word	0x08004519
 80044dc:	0800450d 	.word	0x0800450d
 80044e0:	08004519 	.word	0x08004519
 80044e4:	08004519 	.word	0x08004519
 80044e8:	08004519 	.word	0x08004519
 80044ec:	08004507 	.word	0x08004507
 80044f0:	08004519 	.word	0x08004519
 80044f4:	08004519 	.word	0x08004519
 80044f8:	08004519 	.word	0x08004519
 80044fc:	08004513 	.word	0x08004513
 8004500:	2300      	movs	r3, #0
 8004502:	76fb      	strb	r3, [r7, #27]
 8004504:	e0af      	b.n	8004666 <UART_SetConfig+0x282>
 8004506:	2302      	movs	r3, #2
 8004508:	76fb      	strb	r3, [r7, #27]
 800450a:	e0ac      	b.n	8004666 <UART_SetConfig+0x282>
 800450c:	2304      	movs	r3, #4
 800450e:	76fb      	strb	r3, [r7, #27]
 8004510:	e0a9      	b.n	8004666 <UART_SetConfig+0x282>
 8004512:	2308      	movs	r3, #8
 8004514:	76fb      	strb	r3, [r7, #27]
 8004516:	e0a6      	b.n	8004666 <UART_SetConfig+0x282>
 8004518:	2310      	movs	r3, #16
 800451a:	76fb      	strb	r3, [r7, #27]
 800451c:	e0a3      	b.n	8004666 <UART_SetConfig+0x282>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a6d      	ldr	r2, [pc, #436]	; (80046d8 <UART_SetConfig+0x2f4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d120      	bne.n	800456a <UART_SetConfig+0x186>
 8004528:	4b69      	ldr	r3, [pc, #420]	; (80046d0 <UART_SetConfig+0x2ec>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004532:	2b30      	cmp	r3, #48	; 0x30
 8004534:	d013      	beq.n	800455e <UART_SetConfig+0x17a>
 8004536:	2b30      	cmp	r3, #48	; 0x30
 8004538:	d814      	bhi.n	8004564 <UART_SetConfig+0x180>
 800453a:	2b20      	cmp	r3, #32
 800453c:	d009      	beq.n	8004552 <UART_SetConfig+0x16e>
 800453e:	2b20      	cmp	r3, #32
 8004540:	d810      	bhi.n	8004564 <UART_SetConfig+0x180>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <UART_SetConfig+0x168>
 8004546:	2b10      	cmp	r3, #16
 8004548:	d006      	beq.n	8004558 <UART_SetConfig+0x174>
 800454a:	e00b      	b.n	8004564 <UART_SetConfig+0x180>
 800454c:	2300      	movs	r3, #0
 800454e:	76fb      	strb	r3, [r7, #27]
 8004550:	e089      	b.n	8004666 <UART_SetConfig+0x282>
 8004552:	2302      	movs	r3, #2
 8004554:	76fb      	strb	r3, [r7, #27]
 8004556:	e086      	b.n	8004666 <UART_SetConfig+0x282>
 8004558:	2304      	movs	r3, #4
 800455a:	76fb      	strb	r3, [r7, #27]
 800455c:	e083      	b.n	8004666 <UART_SetConfig+0x282>
 800455e:	2308      	movs	r3, #8
 8004560:	76fb      	strb	r3, [r7, #27]
 8004562:	e080      	b.n	8004666 <UART_SetConfig+0x282>
 8004564:	2310      	movs	r3, #16
 8004566:	76fb      	strb	r3, [r7, #27]
 8004568:	e07d      	b.n	8004666 <UART_SetConfig+0x282>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a5b      	ldr	r2, [pc, #364]	; (80046dc <UART_SetConfig+0x2f8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d120      	bne.n	80045b6 <UART_SetConfig+0x1d2>
 8004574:	4b56      	ldr	r3, [pc, #344]	; (80046d0 <UART_SetConfig+0x2ec>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800457e:	2bc0      	cmp	r3, #192	; 0xc0
 8004580:	d013      	beq.n	80045aa <UART_SetConfig+0x1c6>
 8004582:	2bc0      	cmp	r3, #192	; 0xc0
 8004584:	d814      	bhi.n	80045b0 <UART_SetConfig+0x1cc>
 8004586:	2b80      	cmp	r3, #128	; 0x80
 8004588:	d009      	beq.n	800459e <UART_SetConfig+0x1ba>
 800458a:	2b80      	cmp	r3, #128	; 0x80
 800458c:	d810      	bhi.n	80045b0 <UART_SetConfig+0x1cc>
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <UART_SetConfig+0x1b4>
 8004592:	2b40      	cmp	r3, #64	; 0x40
 8004594:	d006      	beq.n	80045a4 <UART_SetConfig+0x1c0>
 8004596:	e00b      	b.n	80045b0 <UART_SetConfig+0x1cc>
 8004598:	2300      	movs	r3, #0
 800459a:	76fb      	strb	r3, [r7, #27]
 800459c:	e063      	b.n	8004666 <UART_SetConfig+0x282>
 800459e:	2302      	movs	r3, #2
 80045a0:	76fb      	strb	r3, [r7, #27]
 80045a2:	e060      	b.n	8004666 <UART_SetConfig+0x282>
 80045a4:	2304      	movs	r3, #4
 80045a6:	76fb      	strb	r3, [r7, #27]
 80045a8:	e05d      	b.n	8004666 <UART_SetConfig+0x282>
 80045aa:	2308      	movs	r3, #8
 80045ac:	76fb      	strb	r3, [r7, #27]
 80045ae:	e05a      	b.n	8004666 <UART_SetConfig+0x282>
 80045b0:	2310      	movs	r3, #16
 80045b2:	76fb      	strb	r3, [r7, #27]
 80045b4:	e057      	b.n	8004666 <UART_SetConfig+0x282>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a49      	ldr	r2, [pc, #292]	; (80046e0 <UART_SetConfig+0x2fc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d125      	bne.n	800460c <UART_SetConfig+0x228>
 80045c0:	4b43      	ldr	r3, [pc, #268]	; (80046d0 <UART_SetConfig+0x2ec>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ce:	d017      	beq.n	8004600 <UART_SetConfig+0x21c>
 80045d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d4:	d817      	bhi.n	8004606 <UART_SetConfig+0x222>
 80045d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045da:	d00b      	beq.n	80045f4 <UART_SetConfig+0x210>
 80045dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e0:	d811      	bhi.n	8004606 <UART_SetConfig+0x222>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <UART_SetConfig+0x20a>
 80045e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ea:	d006      	beq.n	80045fa <UART_SetConfig+0x216>
 80045ec:	e00b      	b.n	8004606 <UART_SetConfig+0x222>
 80045ee:	2300      	movs	r3, #0
 80045f0:	76fb      	strb	r3, [r7, #27]
 80045f2:	e038      	b.n	8004666 <UART_SetConfig+0x282>
 80045f4:	2302      	movs	r3, #2
 80045f6:	76fb      	strb	r3, [r7, #27]
 80045f8:	e035      	b.n	8004666 <UART_SetConfig+0x282>
 80045fa:	2304      	movs	r3, #4
 80045fc:	76fb      	strb	r3, [r7, #27]
 80045fe:	e032      	b.n	8004666 <UART_SetConfig+0x282>
 8004600:	2308      	movs	r3, #8
 8004602:	76fb      	strb	r3, [r7, #27]
 8004604:	e02f      	b.n	8004666 <UART_SetConfig+0x282>
 8004606:	2310      	movs	r3, #16
 8004608:	76fb      	strb	r3, [r7, #27]
 800460a:	e02c      	b.n	8004666 <UART_SetConfig+0x282>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a2d      	ldr	r2, [pc, #180]	; (80046c8 <UART_SetConfig+0x2e4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d125      	bne.n	8004662 <UART_SetConfig+0x27e>
 8004616:	4b2e      	ldr	r3, [pc, #184]	; (80046d0 <UART_SetConfig+0x2ec>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004620:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004624:	d017      	beq.n	8004656 <UART_SetConfig+0x272>
 8004626:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800462a:	d817      	bhi.n	800465c <UART_SetConfig+0x278>
 800462c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004630:	d00b      	beq.n	800464a <UART_SetConfig+0x266>
 8004632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004636:	d811      	bhi.n	800465c <UART_SetConfig+0x278>
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <UART_SetConfig+0x260>
 800463c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004640:	d006      	beq.n	8004650 <UART_SetConfig+0x26c>
 8004642:	e00b      	b.n	800465c <UART_SetConfig+0x278>
 8004644:	2300      	movs	r3, #0
 8004646:	76fb      	strb	r3, [r7, #27]
 8004648:	e00d      	b.n	8004666 <UART_SetConfig+0x282>
 800464a:	2302      	movs	r3, #2
 800464c:	76fb      	strb	r3, [r7, #27]
 800464e:	e00a      	b.n	8004666 <UART_SetConfig+0x282>
 8004650:	2304      	movs	r3, #4
 8004652:	76fb      	strb	r3, [r7, #27]
 8004654:	e007      	b.n	8004666 <UART_SetConfig+0x282>
 8004656:	2308      	movs	r3, #8
 8004658:	76fb      	strb	r3, [r7, #27]
 800465a:	e004      	b.n	8004666 <UART_SetConfig+0x282>
 800465c:	2310      	movs	r3, #16
 800465e:	76fb      	strb	r3, [r7, #27]
 8004660:	e001      	b.n	8004666 <UART_SetConfig+0x282>
 8004662:	2310      	movs	r3, #16
 8004664:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a17      	ldr	r2, [pc, #92]	; (80046c8 <UART_SetConfig+0x2e4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	f040 8087 	bne.w	8004780 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004672:	7efb      	ldrb	r3, [r7, #27]
 8004674:	2b08      	cmp	r3, #8
 8004676:	d837      	bhi.n	80046e8 <UART_SetConfig+0x304>
 8004678:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <UART_SetConfig+0x29c>)
 800467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467e:	bf00      	nop
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046e9 	.word	0x080046e9
 8004688:	080046ad 	.word	0x080046ad
 800468c:	080046e9 	.word	0x080046e9
 8004690:	080046b3 	.word	0x080046b3
 8004694:	080046e9 	.word	0x080046e9
 8004698:	080046e9 	.word	0x080046e9
 800469c:	080046e9 	.word	0x080046e9
 80046a0:	080046bb 	.word	0x080046bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a4:	f7fe fe0e 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 80046a8:	6178      	str	r0, [r7, #20]
        break;
 80046aa:	e022      	b.n	80046f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046ac:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <UART_SetConfig+0x300>)
 80046ae:	617b      	str	r3, [r7, #20]
        break;
 80046b0:	e01f      	b.n	80046f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046b2:	f7fe fd6f 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 80046b6:	6178      	str	r0, [r7, #20]
        break;
 80046b8:	e01b      	b.n	80046f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046be:	617b      	str	r3, [r7, #20]
        break;
 80046c0:	e017      	b.n	80046f2 <UART_SetConfig+0x30e>
 80046c2:	bf00      	nop
 80046c4:	efff69f3 	.word	0xefff69f3
 80046c8:	40008000 	.word	0x40008000
 80046cc:	40013800 	.word	0x40013800
 80046d0:	40021000 	.word	0x40021000
 80046d4:	40004400 	.word	0x40004400
 80046d8:	40004800 	.word	0x40004800
 80046dc:	40004c00 	.word	0x40004c00
 80046e0:	40005000 	.word	0x40005000
 80046e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	76bb      	strb	r3, [r7, #26]
        break;
 80046f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80f1 	beq.w	80048dc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	4413      	add	r3, r2
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	429a      	cmp	r2, r3
 8004708:	d305      	bcc.n	8004716 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	429a      	cmp	r2, r3
 8004714:	d902      	bls.n	800471c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	76bb      	strb	r3, [r7, #26]
 800471a:	e0df      	b.n	80048dc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4618      	mov	r0, r3
 8004720:	f04f 0100 	mov.w	r1, #0
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	020b      	lsls	r3, r1, #8
 800472e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004732:	0202      	lsls	r2, r0, #8
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	6849      	ldr	r1, [r1, #4]
 8004738:	0849      	lsrs	r1, r1, #1
 800473a:	4608      	mov	r0, r1
 800473c:	f04f 0100 	mov.w	r1, #0
 8004740:	1814      	adds	r4, r2, r0
 8004742:	eb43 0501 	adc.w	r5, r3, r1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	461a      	mov	r2, r3
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	4620      	mov	r0, r4
 8004752:	4629      	mov	r1, r5
 8004754:	f7fb fd8c 	bl	8000270 <__aeabi_uldivmod>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4613      	mov	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004766:	d308      	bcc.n	800477a <UART_SetConfig+0x396>
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800476e:	d204      	bcs.n	800477a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	60da      	str	r2, [r3, #12]
 8004778:	e0b0      	b.n	80048dc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	76bb      	strb	r3, [r7, #26]
 800477e:	e0ad      	b.n	80048dc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004788:	d15c      	bne.n	8004844 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800478a:	7efb      	ldrb	r3, [r7, #27]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d828      	bhi.n	80047e2 <UART_SetConfig+0x3fe>
 8004790:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <UART_SetConfig+0x3b4>)
 8004792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004796:	bf00      	nop
 8004798:	080047bd 	.word	0x080047bd
 800479c:	080047c5 	.word	0x080047c5
 80047a0:	080047cd 	.word	0x080047cd
 80047a4:	080047e3 	.word	0x080047e3
 80047a8:	080047d3 	.word	0x080047d3
 80047ac:	080047e3 	.word	0x080047e3
 80047b0:	080047e3 	.word	0x080047e3
 80047b4:	080047e3 	.word	0x080047e3
 80047b8:	080047db 	.word	0x080047db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047bc:	f7fe fd82 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 80047c0:	6178      	str	r0, [r7, #20]
        break;
 80047c2:	e013      	b.n	80047ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047c4:	f7fe fd94 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 80047c8:	6178      	str	r0, [r7, #20]
        break;
 80047ca:	e00f      	b.n	80047ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047cc:	4b49      	ldr	r3, [pc, #292]	; (80048f4 <UART_SetConfig+0x510>)
 80047ce:	617b      	str	r3, [r7, #20]
        break;
 80047d0:	e00c      	b.n	80047ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047d2:	f7fe fcdf 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 80047d6:	6178      	str	r0, [r7, #20]
        break;
 80047d8:	e008      	b.n	80047ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047de:	617b      	str	r3, [r7, #20]
        break;
 80047e0:	e004      	b.n	80047ec <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	76bb      	strb	r3, [r7, #26]
        break;
 80047ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d074      	beq.n	80048dc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	005a      	lsls	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	441a      	add	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	b29b      	uxth	r3, r3
 8004808:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b0f      	cmp	r3, #15
 800480e:	d916      	bls.n	800483e <UART_SetConfig+0x45a>
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004816:	d212      	bcs.n	800483e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	b29b      	uxth	r3, r3
 800481c:	f023 030f 	bic.w	r3, r3, #15
 8004820:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	085b      	lsrs	r3, r3, #1
 8004826:	b29b      	uxth	r3, r3
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	b29a      	uxth	r2, r3
 800482e:	89fb      	ldrh	r3, [r7, #14]
 8004830:	4313      	orrs	r3, r2
 8004832:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	89fa      	ldrh	r2, [r7, #14]
 800483a:	60da      	str	r2, [r3, #12]
 800483c:	e04e      	b.n	80048dc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	76bb      	strb	r3, [r7, #26]
 8004842:	e04b      	b.n	80048dc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004844:	7efb      	ldrb	r3, [r7, #27]
 8004846:	2b08      	cmp	r3, #8
 8004848:	d827      	bhi.n	800489a <UART_SetConfig+0x4b6>
 800484a:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <UART_SetConfig+0x46c>)
 800484c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004850:	08004875 	.word	0x08004875
 8004854:	0800487d 	.word	0x0800487d
 8004858:	08004885 	.word	0x08004885
 800485c:	0800489b 	.word	0x0800489b
 8004860:	0800488b 	.word	0x0800488b
 8004864:	0800489b 	.word	0x0800489b
 8004868:	0800489b 	.word	0x0800489b
 800486c:	0800489b 	.word	0x0800489b
 8004870:	08004893 	.word	0x08004893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004874:	f7fe fd26 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 8004878:	6178      	str	r0, [r7, #20]
        break;
 800487a:	e013      	b.n	80048a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800487c:	f7fe fd38 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 8004880:	6178      	str	r0, [r7, #20]
        break;
 8004882:	e00f      	b.n	80048a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004884:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <UART_SetConfig+0x510>)
 8004886:	617b      	str	r3, [r7, #20]
        break;
 8004888:	e00c      	b.n	80048a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488a:	f7fe fc83 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 800488e:	6178      	str	r0, [r7, #20]
        break;
 8004890:	e008      	b.n	80048a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004896:	617b      	str	r3, [r7, #20]
        break;
 8004898:	e004      	b.n	80048a4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	76bb      	strb	r3, [r7, #26]
        break;
 80048a2:	bf00      	nop
    }

    if (pclk != 0U)
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d018      	beq.n	80048dc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	085a      	lsrs	r2, r3, #1
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	441a      	add	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	b29b      	uxth	r3, r3
 80048be:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b0f      	cmp	r3, #15
 80048c4:	d908      	bls.n	80048d8 <UART_SetConfig+0x4f4>
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048cc:	d204      	bcs.n	80048d8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	e001      	b.n	80048dc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048e8:	7ebb      	ldrb	r3, [r7, #26]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bdb0      	pop	{r4, r5, r7, pc}
 80048f2:	bf00      	nop
 80048f4:	00f42400 	.word	0x00f42400

080048f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f6:	d10a      	bne.n	8004a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a4c:	f7fc fbe8 	bl	8001220 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d10e      	bne.n	8004a7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f82d 	bl	8004ace <UART_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e023      	b.n	8004ac6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d10e      	bne.n	8004aaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f817 	bl	8004ace <UART_WaitOnFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e00d      	b.n	8004ac6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	4613      	mov	r3, r2
 8004adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ade:	e05e      	b.n	8004b9e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae6:	d05a      	beq.n	8004b9e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae8:	f7fc fb9a 	bl	8001220 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d302      	bcc.n	8004afe <UART_WaitOnFlagUntilTimeout+0x30>
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d11b      	bne.n	8004b36 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b0c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e043      	b.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d02c      	beq.n	8004b9e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b52:	d124      	bne.n	8004b9e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b5c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b6c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0201 	bic.w	r2, r2, #1
 8004b7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e00f      	b.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	bf0c      	ite	eq
 8004bae:	2301      	moveq	r3, #1
 8004bb0:	2300      	movne	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d091      	beq.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfa:	d10e      	bne.n	8004c1a <UART_Start_Receive_IT+0x52>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d105      	bne.n	8004c10 <UART_Start_Receive_IT+0x48>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c0e:	e02d      	b.n	8004c6c <UART_Start_Receive_IT+0xa4>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	22ff      	movs	r2, #255	; 0xff
 8004c14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c18:	e028      	b.n	8004c6c <UART_Start_Receive_IT+0xa4>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10d      	bne.n	8004c3e <UART_Start_Receive_IT+0x76>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d104      	bne.n	8004c34 <UART_Start_Receive_IT+0x6c>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	22ff      	movs	r2, #255	; 0xff
 8004c2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c32:	e01b      	b.n	8004c6c <UART_Start_Receive_IT+0xa4>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	227f      	movs	r2, #127	; 0x7f
 8004c38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c3c:	e016      	b.n	8004c6c <UART_Start_Receive_IT+0xa4>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c46:	d10d      	bne.n	8004c64 <UART_Start_Receive_IT+0x9c>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d104      	bne.n	8004c5a <UART_Start_Receive_IT+0x92>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	227f      	movs	r2, #127	; 0x7f
 8004c54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c58:	e008      	b.n	8004c6c <UART_Start_Receive_IT+0xa4>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	223f      	movs	r2, #63	; 0x3f
 8004c5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c62:	e003      	b.n	8004c6c <UART_Start_Receive_IT+0xa4>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2222      	movs	r2, #34	; 0x22
 8004c78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c92:	d107      	bne.n	8004ca4 <UART_Start_Receive_IT+0xdc>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4a0c      	ldr	r2, [pc, #48]	; (8004cd0 <UART_Start_Receive_IT+0x108>)
 8004ca0:	665a      	str	r2, [r3, #100]	; 0x64
 8004ca2:	e002      	b.n	8004caa <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a0b      	ldr	r2, [pc, #44]	; (8004cd4 <UART_Start_Receive_IT+0x10c>)
 8004ca8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004cc0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	08004e6d 	.word	0x08004e6d
 8004cd4:	08004d95 	.word	0x08004d95

08004cd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d107      	bne.n	8004d18 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0210 	bic.w	r2, r2, #16
 8004d16:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff fb2f 	bl	80043b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d78:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff fb0c 	bl	80043a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004da2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da8:	2b22      	cmp	r3, #34	; 0x22
 8004daa:	d151      	bne.n	8004e50 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004db2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004db4:	89bb      	ldrh	r3, [r7, #12]
 8004db6:	b2d9      	uxtb	r1, r3
 8004db8:	89fb      	ldrh	r3, [r7, #14]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc0:	400a      	ands	r2, r1
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d13a      	bne.n	8004e64 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dfc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0201 	bic.w	r2, r2, #1
 8004e0c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d10f      	bne.n	8004e42 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0210 	bic.w	r2, r2, #16
 8004e30:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fac6 	bl	80043cc <HAL_UARTEx_RxEventCallback>
 8004e40:	e002      	b.n	8004e48 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fb febc 	bl	8000bc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e4e:	e009      	b.n	8004e64 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	8b1b      	ldrh	r3, [r3, #24]
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0208 	orr.w	r2, r2, #8
 8004e60:	b292      	uxth	r2, r2
 8004e62:	831a      	strh	r2, [r3, #24]
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e7a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e80:	2b22      	cmp	r3, #34	; 0x22
 8004e82:	d151      	bne.n	8004f28 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e8a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e92:	89ba      	ldrh	r2, [r7, #12]
 8004e94:	89fb      	ldrh	r3, [r7, #14]
 8004e96:	4013      	ands	r3, r2
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	1c9a      	adds	r2, r3, #2
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d13a      	bne.n	8004f3c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ed4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0201 	bic.w	r2, r2, #1
 8004ee4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d10f      	bne.n	8004f1a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0210 	bic.w	r2, r2, #16
 8004f08:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fa5a 	bl	80043cc <HAL_UARTEx_RxEventCallback>
 8004f18:	e002      	b.n	8004f20 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fb fe50 	bl	8000bc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f26:	e009      	b.n	8004f3c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	8b1b      	ldrh	r3, [r3, #24]
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0208 	orr.w	r2, r2, #8
 8004f38:	b292      	uxth	r2, r2
 8004f3a:	831a      	strh	r2, [r3, #24]
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <__errno>:
 8004f58:	4b01      	ldr	r3, [pc, #4]	; (8004f60 <__errno+0x8>)
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20000018 	.word	0x20000018

08004f64 <__libc_init_array>:
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	4d0d      	ldr	r5, [pc, #52]	; (8004f9c <__libc_init_array+0x38>)
 8004f68:	4c0d      	ldr	r4, [pc, #52]	; (8004fa0 <__libc_init_array+0x3c>)
 8004f6a:	1b64      	subs	r4, r4, r5
 8004f6c:	10a4      	asrs	r4, r4, #2
 8004f6e:	2600      	movs	r6, #0
 8004f70:	42a6      	cmp	r6, r4
 8004f72:	d109      	bne.n	8004f88 <__libc_init_array+0x24>
 8004f74:	4d0b      	ldr	r5, [pc, #44]	; (8004fa4 <__libc_init_array+0x40>)
 8004f76:	4c0c      	ldr	r4, [pc, #48]	; (8004fa8 <__libc_init_array+0x44>)
 8004f78:	f000 ffec 	bl	8005f54 <_init>
 8004f7c:	1b64      	subs	r4, r4, r5
 8004f7e:	10a4      	asrs	r4, r4, #2
 8004f80:	2600      	movs	r6, #0
 8004f82:	42a6      	cmp	r6, r4
 8004f84:	d105      	bne.n	8004f92 <__libc_init_array+0x2e>
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
 8004f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8c:	4798      	blx	r3
 8004f8e:	3601      	adds	r6, #1
 8004f90:	e7ee      	b.n	8004f70 <__libc_init_array+0xc>
 8004f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f96:	4798      	blx	r3
 8004f98:	3601      	adds	r6, #1
 8004f9a:	e7f2      	b.n	8004f82 <__libc_init_array+0x1e>
 8004f9c:	080060d8 	.word	0x080060d8
 8004fa0:	080060d8 	.word	0x080060d8
 8004fa4:	080060d8 	.word	0x080060d8
 8004fa8:	080060dc 	.word	0x080060dc

08004fac <memset>:
 8004fac:	4402      	add	r2, r0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d100      	bne.n	8004fb6 <memset+0xa>
 8004fb4:	4770      	bx	lr
 8004fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fba:	e7f9      	b.n	8004fb0 <memset+0x4>

08004fbc <iprintf>:
 8004fbc:	b40f      	push	{r0, r1, r2, r3}
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <iprintf+0x2c>)
 8004fc0:	b513      	push	{r0, r1, r4, lr}
 8004fc2:	681c      	ldr	r4, [r3, #0]
 8004fc4:	b124      	cbz	r4, 8004fd0 <iprintf+0x14>
 8004fc6:	69a3      	ldr	r3, [r4, #24]
 8004fc8:	b913      	cbnz	r3, 8004fd0 <iprintf+0x14>
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f000 fa5e 	bl	800548c <__sinit>
 8004fd0:	ab05      	add	r3, sp, #20
 8004fd2:	9a04      	ldr	r2, [sp, #16]
 8004fd4:	68a1      	ldr	r1, [r4, #8]
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f000 fc2f 	bl	800583c <_vfiprintf_r>
 8004fde:	b002      	add	sp, #8
 8004fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe4:	b004      	add	sp, #16
 8004fe6:	4770      	bx	lr
 8004fe8:	20000018 	.word	0x20000018

08004fec <_puts_r>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	460e      	mov	r6, r1
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	b118      	cbz	r0, 8004ffc <_puts_r+0x10>
 8004ff4:	6983      	ldr	r3, [r0, #24]
 8004ff6:	b90b      	cbnz	r3, 8004ffc <_puts_r+0x10>
 8004ff8:	f000 fa48 	bl	800548c <__sinit>
 8004ffc:	69ab      	ldr	r3, [r5, #24]
 8004ffe:	68ac      	ldr	r4, [r5, #8]
 8005000:	b913      	cbnz	r3, 8005008 <_puts_r+0x1c>
 8005002:	4628      	mov	r0, r5
 8005004:	f000 fa42 	bl	800548c <__sinit>
 8005008:	4b2c      	ldr	r3, [pc, #176]	; (80050bc <_puts_r+0xd0>)
 800500a:	429c      	cmp	r4, r3
 800500c:	d120      	bne.n	8005050 <_puts_r+0x64>
 800500e:	686c      	ldr	r4, [r5, #4]
 8005010:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005012:	07db      	lsls	r3, r3, #31
 8005014:	d405      	bmi.n	8005022 <_puts_r+0x36>
 8005016:	89a3      	ldrh	r3, [r4, #12]
 8005018:	0598      	lsls	r0, r3, #22
 800501a:	d402      	bmi.n	8005022 <_puts_r+0x36>
 800501c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800501e:	f000 fad3 	bl	80055c8 <__retarget_lock_acquire_recursive>
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	0719      	lsls	r1, r3, #28
 8005026:	d51d      	bpl.n	8005064 <_puts_r+0x78>
 8005028:	6923      	ldr	r3, [r4, #16]
 800502a:	b1db      	cbz	r3, 8005064 <_puts_r+0x78>
 800502c:	3e01      	subs	r6, #1
 800502e:	68a3      	ldr	r3, [r4, #8]
 8005030:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005034:	3b01      	subs	r3, #1
 8005036:	60a3      	str	r3, [r4, #8]
 8005038:	bb39      	cbnz	r1, 800508a <_puts_r+0x9e>
 800503a:	2b00      	cmp	r3, #0
 800503c:	da38      	bge.n	80050b0 <_puts_r+0xc4>
 800503e:	4622      	mov	r2, r4
 8005040:	210a      	movs	r1, #10
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f848 	bl	80050d8 <__swbuf_r>
 8005048:	3001      	adds	r0, #1
 800504a:	d011      	beq.n	8005070 <_puts_r+0x84>
 800504c:	250a      	movs	r5, #10
 800504e:	e011      	b.n	8005074 <_puts_r+0x88>
 8005050:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <_puts_r+0xd4>)
 8005052:	429c      	cmp	r4, r3
 8005054:	d101      	bne.n	800505a <_puts_r+0x6e>
 8005056:	68ac      	ldr	r4, [r5, #8]
 8005058:	e7da      	b.n	8005010 <_puts_r+0x24>
 800505a:	4b1a      	ldr	r3, [pc, #104]	; (80050c4 <_puts_r+0xd8>)
 800505c:	429c      	cmp	r4, r3
 800505e:	bf08      	it	eq
 8005060:	68ec      	ldreq	r4, [r5, #12]
 8005062:	e7d5      	b.n	8005010 <_puts_r+0x24>
 8005064:	4621      	mov	r1, r4
 8005066:	4628      	mov	r0, r5
 8005068:	f000 f888 	bl	800517c <__swsetup_r>
 800506c:	2800      	cmp	r0, #0
 800506e:	d0dd      	beq.n	800502c <_puts_r+0x40>
 8005070:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005076:	07da      	lsls	r2, r3, #31
 8005078:	d405      	bmi.n	8005086 <_puts_r+0x9a>
 800507a:	89a3      	ldrh	r3, [r4, #12]
 800507c:	059b      	lsls	r3, r3, #22
 800507e:	d402      	bmi.n	8005086 <_puts_r+0x9a>
 8005080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005082:	f000 faa2 	bl	80055ca <__retarget_lock_release_recursive>
 8005086:	4628      	mov	r0, r5
 8005088:	bd70      	pop	{r4, r5, r6, pc}
 800508a:	2b00      	cmp	r3, #0
 800508c:	da04      	bge.n	8005098 <_puts_r+0xac>
 800508e:	69a2      	ldr	r2, [r4, #24]
 8005090:	429a      	cmp	r2, r3
 8005092:	dc06      	bgt.n	80050a2 <_puts_r+0xb6>
 8005094:	290a      	cmp	r1, #10
 8005096:	d004      	beq.n	80050a2 <_puts_r+0xb6>
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	6022      	str	r2, [r4, #0]
 800509e:	7019      	strb	r1, [r3, #0]
 80050a0:	e7c5      	b.n	800502e <_puts_r+0x42>
 80050a2:	4622      	mov	r2, r4
 80050a4:	4628      	mov	r0, r5
 80050a6:	f000 f817 	bl	80050d8 <__swbuf_r>
 80050aa:	3001      	adds	r0, #1
 80050ac:	d1bf      	bne.n	800502e <_puts_r+0x42>
 80050ae:	e7df      	b.n	8005070 <_puts_r+0x84>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	250a      	movs	r5, #10
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	6022      	str	r2, [r4, #0]
 80050b8:	701d      	strb	r5, [r3, #0]
 80050ba:	e7db      	b.n	8005074 <_puts_r+0x88>
 80050bc:	0800605c 	.word	0x0800605c
 80050c0:	0800607c 	.word	0x0800607c
 80050c4:	0800603c 	.word	0x0800603c

080050c8 <puts>:
 80050c8:	4b02      	ldr	r3, [pc, #8]	; (80050d4 <puts+0xc>)
 80050ca:	4601      	mov	r1, r0
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	f7ff bf8d 	b.w	8004fec <_puts_r>
 80050d2:	bf00      	nop
 80050d4:	20000018 	.word	0x20000018

080050d8 <__swbuf_r>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	460e      	mov	r6, r1
 80050dc:	4614      	mov	r4, r2
 80050de:	4605      	mov	r5, r0
 80050e0:	b118      	cbz	r0, 80050ea <__swbuf_r+0x12>
 80050e2:	6983      	ldr	r3, [r0, #24]
 80050e4:	b90b      	cbnz	r3, 80050ea <__swbuf_r+0x12>
 80050e6:	f000 f9d1 	bl	800548c <__sinit>
 80050ea:	4b21      	ldr	r3, [pc, #132]	; (8005170 <__swbuf_r+0x98>)
 80050ec:	429c      	cmp	r4, r3
 80050ee:	d12b      	bne.n	8005148 <__swbuf_r+0x70>
 80050f0:	686c      	ldr	r4, [r5, #4]
 80050f2:	69a3      	ldr	r3, [r4, #24]
 80050f4:	60a3      	str	r3, [r4, #8]
 80050f6:	89a3      	ldrh	r3, [r4, #12]
 80050f8:	071a      	lsls	r2, r3, #28
 80050fa:	d52f      	bpl.n	800515c <__swbuf_r+0x84>
 80050fc:	6923      	ldr	r3, [r4, #16]
 80050fe:	b36b      	cbz	r3, 800515c <__swbuf_r+0x84>
 8005100:	6923      	ldr	r3, [r4, #16]
 8005102:	6820      	ldr	r0, [r4, #0]
 8005104:	1ac0      	subs	r0, r0, r3
 8005106:	6963      	ldr	r3, [r4, #20]
 8005108:	b2f6      	uxtb	r6, r6
 800510a:	4283      	cmp	r3, r0
 800510c:	4637      	mov	r7, r6
 800510e:	dc04      	bgt.n	800511a <__swbuf_r+0x42>
 8005110:	4621      	mov	r1, r4
 8005112:	4628      	mov	r0, r5
 8005114:	f000 f926 	bl	8005364 <_fflush_r>
 8005118:	bb30      	cbnz	r0, 8005168 <__swbuf_r+0x90>
 800511a:	68a3      	ldr	r3, [r4, #8]
 800511c:	3b01      	subs	r3, #1
 800511e:	60a3      	str	r3, [r4, #8]
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	6022      	str	r2, [r4, #0]
 8005126:	701e      	strb	r6, [r3, #0]
 8005128:	6963      	ldr	r3, [r4, #20]
 800512a:	3001      	adds	r0, #1
 800512c:	4283      	cmp	r3, r0
 800512e:	d004      	beq.n	800513a <__swbuf_r+0x62>
 8005130:	89a3      	ldrh	r3, [r4, #12]
 8005132:	07db      	lsls	r3, r3, #31
 8005134:	d506      	bpl.n	8005144 <__swbuf_r+0x6c>
 8005136:	2e0a      	cmp	r6, #10
 8005138:	d104      	bne.n	8005144 <__swbuf_r+0x6c>
 800513a:	4621      	mov	r1, r4
 800513c:	4628      	mov	r0, r5
 800513e:	f000 f911 	bl	8005364 <_fflush_r>
 8005142:	b988      	cbnz	r0, 8005168 <__swbuf_r+0x90>
 8005144:	4638      	mov	r0, r7
 8005146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005148:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <__swbuf_r+0x9c>)
 800514a:	429c      	cmp	r4, r3
 800514c:	d101      	bne.n	8005152 <__swbuf_r+0x7a>
 800514e:	68ac      	ldr	r4, [r5, #8]
 8005150:	e7cf      	b.n	80050f2 <__swbuf_r+0x1a>
 8005152:	4b09      	ldr	r3, [pc, #36]	; (8005178 <__swbuf_r+0xa0>)
 8005154:	429c      	cmp	r4, r3
 8005156:	bf08      	it	eq
 8005158:	68ec      	ldreq	r4, [r5, #12]
 800515a:	e7ca      	b.n	80050f2 <__swbuf_r+0x1a>
 800515c:	4621      	mov	r1, r4
 800515e:	4628      	mov	r0, r5
 8005160:	f000 f80c 	bl	800517c <__swsetup_r>
 8005164:	2800      	cmp	r0, #0
 8005166:	d0cb      	beq.n	8005100 <__swbuf_r+0x28>
 8005168:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800516c:	e7ea      	b.n	8005144 <__swbuf_r+0x6c>
 800516e:	bf00      	nop
 8005170:	0800605c 	.word	0x0800605c
 8005174:	0800607c 	.word	0x0800607c
 8005178:	0800603c 	.word	0x0800603c

0800517c <__swsetup_r>:
 800517c:	4b32      	ldr	r3, [pc, #200]	; (8005248 <__swsetup_r+0xcc>)
 800517e:	b570      	push	{r4, r5, r6, lr}
 8005180:	681d      	ldr	r5, [r3, #0]
 8005182:	4606      	mov	r6, r0
 8005184:	460c      	mov	r4, r1
 8005186:	b125      	cbz	r5, 8005192 <__swsetup_r+0x16>
 8005188:	69ab      	ldr	r3, [r5, #24]
 800518a:	b913      	cbnz	r3, 8005192 <__swsetup_r+0x16>
 800518c:	4628      	mov	r0, r5
 800518e:	f000 f97d 	bl	800548c <__sinit>
 8005192:	4b2e      	ldr	r3, [pc, #184]	; (800524c <__swsetup_r+0xd0>)
 8005194:	429c      	cmp	r4, r3
 8005196:	d10f      	bne.n	80051b8 <__swsetup_r+0x3c>
 8005198:	686c      	ldr	r4, [r5, #4]
 800519a:	89a3      	ldrh	r3, [r4, #12]
 800519c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051a0:	0719      	lsls	r1, r3, #28
 80051a2:	d42c      	bmi.n	80051fe <__swsetup_r+0x82>
 80051a4:	06dd      	lsls	r5, r3, #27
 80051a6:	d411      	bmi.n	80051cc <__swsetup_r+0x50>
 80051a8:	2309      	movs	r3, #9
 80051aa:	6033      	str	r3, [r6, #0]
 80051ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051b0:	81a3      	strh	r3, [r4, #12]
 80051b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051b6:	e03e      	b.n	8005236 <__swsetup_r+0xba>
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <__swsetup_r+0xd4>)
 80051ba:	429c      	cmp	r4, r3
 80051bc:	d101      	bne.n	80051c2 <__swsetup_r+0x46>
 80051be:	68ac      	ldr	r4, [r5, #8]
 80051c0:	e7eb      	b.n	800519a <__swsetup_r+0x1e>
 80051c2:	4b24      	ldr	r3, [pc, #144]	; (8005254 <__swsetup_r+0xd8>)
 80051c4:	429c      	cmp	r4, r3
 80051c6:	bf08      	it	eq
 80051c8:	68ec      	ldreq	r4, [r5, #12]
 80051ca:	e7e6      	b.n	800519a <__swsetup_r+0x1e>
 80051cc:	0758      	lsls	r0, r3, #29
 80051ce:	d512      	bpl.n	80051f6 <__swsetup_r+0x7a>
 80051d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051d2:	b141      	cbz	r1, 80051e6 <__swsetup_r+0x6a>
 80051d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051d8:	4299      	cmp	r1, r3
 80051da:	d002      	beq.n	80051e2 <__swsetup_r+0x66>
 80051dc:	4630      	mov	r0, r6
 80051de:	f000 fa59 	bl	8005694 <_free_r>
 80051e2:	2300      	movs	r3, #0
 80051e4:	6363      	str	r3, [r4, #52]	; 0x34
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051ec:	81a3      	strh	r3, [r4, #12]
 80051ee:	2300      	movs	r3, #0
 80051f0:	6063      	str	r3, [r4, #4]
 80051f2:	6923      	ldr	r3, [r4, #16]
 80051f4:	6023      	str	r3, [r4, #0]
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	f043 0308 	orr.w	r3, r3, #8
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	6923      	ldr	r3, [r4, #16]
 8005200:	b94b      	cbnz	r3, 8005216 <__swsetup_r+0x9a>
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800520c:	d003      	beq.n	8005216 <__swsetup_r+0x9a>
 800520e:	4621      	mov	r1, r4
 8005210:	4630      	mov	r0, r6
 8005212:	f000 f9ff 	bl	8005614 <__smakebuf_r>
 8005216:	89a0      	ldrh	r0, [r4, #12]
 8005218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800521c:	f010 0301 	ands.w	r3, r0, #1
 8005220:	d00a      	beq.n	8005238 <__swsetup_r+0xbc>
 8005222:	2300      	movs	r3, #0
 8005224:	60a3      	str	r3, [r4, #8]
 8005226:	6963      	ldr	r3, [r4, #20]
 8005228:	425b      	negs	r3, r3
 800522a:	61a3      	str	r3, [r4, #24]
 800522c:	6923      	ldr	r3, [r4, #16]
 800522e:	b943      	cbnz	r3, 8005242 <__swsetup_r+0xc6>
 8005230:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005234:	d1ba      	bne.n	80051ac <__swsetup_r+0x30>
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	0781      	lsls	r1, r0, #30
 800523a:	bf58      	it	pl
 800523c:	6963      	ldrpl	r3, [r4, #20]
 800523e:	60a3      	str	r3, [r4, #8]
 8005240:	e7f4      	b.n	800522c <__swsetup_r+0xb0>
 8005242:	2000      	movs	r0, #0
 8005244:	e7f7      	b.n	8005236 <__swsetup_r+0xba>
 8005246:	bf00      	nop
 8005248:	20000018 	.word	0x20000018
 800524c:	0800605c 	.word	0x0800605c
 8005250:	0800607c 	.word	0x0800607c
 8005254:	0800603c 	.word	0x0800603c

08005258 <__sflush_r>:
 8005258:	898a      	ldrh	r2, [r1, #12]
 800525a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800525e:	4605      	mov	r5, r0
 8005260:	0710      	lsls	r0, r2, #28
 8005262:	460c      	mov	r4, r1
 8005264:	d458      	bmi.n	8005318 <__sflush_r+0xc0>
 8005266:	684b      	ldr	r3, [r1, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	dc05      	bgt.n	8005278 <__sflush_r+0x20>
 800526c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	dc02      	bgt.n	8005278 <__sflush_r+0x20>
 8005272:	2000      	movs	r0, #0
 8005274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800527a:	2e00      	cmp	r6, #0
 800527c:	d0f9      	beq.n	8005272 <__sflush_r+0x1a>
 800527e:	2300      	movs	r3, #0
 8005280:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005284:	682f      	ldr	r7, [r5, #0]
 8005286:	602b      	str	r3, [r5, #0]
 8005288:	d032      	beq.n	80052f0 <__sflush_r+0x98>
 800528a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	075a      	lsls	r2, r3, #29
 8005290:	d505      	bpl.n	800529e <__sflush_r+0x46>
 8005292:	6863      	ldr	r3, [r4, #4]
 8005294:	1ac0      	subs	r0, r0, r3
 8005296:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005298:	b10b      	cbz	r3, 800529e <__sflush_r+0x46>
 800529a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800529c:	1ac0      	subs	r0, r0, r3
 800529e:	2300      	movs	r3, #0
 80052a0:	4602      	mov	r2, r0
 80052a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052a4:	6a21      	ldr	r1, [r4, #32]
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b0      	blx	r6
 80052aa:	1c43      	adds	r3, r0, #1
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	d106      	bne.n	80052be <__sflush_r+0x66>
 80052b0:	6829      	ldr	r1, [r5, #0]
 80052b2:	291d      	cmp	r1, #29
 80052b4:	d82c      	bhi.n	8005310 <__sflush_r+0xb8>
 80052b6:	4a2a      	ldr	r2, [pc, #168]	; (8005360 <__sflush_r+0x108>)
 80052b8:	40ca      	lsrs	r2, r1
 80052ba:	07d6      	lsls	r6, r2, #31
 80052bc:	d528      	bpl.n	8005310 <__sflush_r+0xb8>
 80052be:	2200      	movs	r2, #0
 80052c0:	6062      	str	r2, [r4, #4]
 80052c2:	04d9      	lsls	r1, r3, #19
 80052c4:	6922      	ldr	r2, [r4, #16]
 80052c6:	6022      	str	r2, [r4, #0]
 80052c8:	d504      	bpl.n	80052d4 <__sflush_r+0x7c>
 80052ca:	1c42      	adds	r2, r0, #1
 80052cc:	d101      	bne.n	80052d2 <__sflush_r+0x7a>
 80052ce:	682b      	ldr	r3, [r5, #0]
 80052d0:	b903      	cbnz	r3, 80052d4 <__sflush_r+0x7c>
 80052d2:	6560      	str	r0, [r4, #84]	; 0x54
 80052d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052d6:	602f      	str	r7, [r5, #0]
 80052d8:	2900      	cmp	r1, #0
 80052da:	d0ca      	beq.n	8005272 <__sflush_r+0x1a>
 80052dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052e0:	4299      	cmp	r1, r3
 80052e2:	d002      	beq.n	80052ea <__sflush_r+0x92>
 80052e4:	4628      	mov	r0, r5
 80052e6:	f000 f9d5 	bl	8005694 <_free_r>
 80052ea:	2000      	movs	r0, #0
 80052ec:	6360      	str	r0, [r4, #52]	; 0x34
 80052ee:	e7c1      	b.n	8005274 <__sflush_r+0x1c>
 80052f0:	6a21      	ldr	r1, [r4, #32]
 80052f2:	2301      	movs	r3, #1
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b0      	blx	r6
 80052f8:	1c41      	adds	r1, r0, #1
 80052fa:	d1c7      	bne.n	800528c <__sflush_r+0x34>
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0c4      	beq.n	800528c <__sflush_r+0x34>
 8005302:	2b1d      	cmp	r3, #29
 8005304:	d001      	beq.n	800530a <__sflush_r+0xb2>
 8005306:	2b16      	cmp	r3, #22
 8005308:	d101      	bne.n	800530e <__sflush_r+0xb6>
 800530a:	602f      	str	r7, [r5, #0]
 800530c:	e7b1      	b.n	8005272 <__sflush_r+0x1a>
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005314:	81a3      	strh	r3, [r4, #12]
 8005316:	e7ad      	b.n	8005274 <__sflush_r+0x1c>
 8005318:	690f      	ldr	r7, [r1, #16]
 800531a:	2f00      	cmp	r7, #0
 800531c:	d0a9      	beq.n	8005272 <__sflush_r+0x1a>
 800531e:	0793      	lsls	r3, r2, #30
 8005320:	680e      	ldr	r6, [r1, #0]
 8005322:	bf08      	it	eq
 8005324:	694b      	ldreq	r3, [r1, #20]
 8005326:	600f      	str	r7, [r1, #0]
 8005328:	bf18      	it	ne
 800532a:	2300      	movne	r3, #0
 800532c:	eba6 0807 	sub.w	r8, r6, r7
 8005330:	608b      	str	r3, [r1, #8]
 8005332:	f1b8 0f00 	cmp.w	r8, #0
 8005336:	dd9c      	ble.n	8005272 <__sflush_r+0x1a>
 8005338:	6a21      	ldr	r1, [r4, #32]
 800533a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800533c:	4643      	mov	r3, r8
 800533e:	463a      	mov	r2, r7
 8005340:	4628      	mov	r0, r5
 8005342:	47b0      	blx	r6
 8005344:	2800      	cmp	r0, #0
 8005346:	dc06      	bgt.n	8005356 <__sflush_r+0xfe>
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800534e:	81a3      	strh	r3, [r4, #12]
 8005350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005354:	e78e      	b.n	8005274 <__sflush_r+0x1c>
 8005356:	4407      	add	r7, r0
 8005358:	eba8 0800 	sub.w	r8, r8, r0
 800535c:	e7e9      	b.n	8005332 <__sflush_r+0xda>
 800535e:	bf00      	nop
 8005360:	20400001 	.word	0x20400001

08005364 <_fflush_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	690b      	ldr	r3, [r1, #16]
 8005368:	4605      	mov	r5, r0
 800536a:	460c      	mov	r4, r1
 800536c:	b913      	cbnz	r3, 8005374 <_fflush_r+0x10>
 800536e:	2500      	movs	r5, #0
 8005370:	4628      	mov	r0, r5
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	b118      	cbz	r0, 800537e <_fflush_r+0x1a>
 8005376:	6983      	ldr	r3, [r0, #24]
 8005378:	b90b      	cbnz	r3, 800537e <_fflush_r+0x1a>
 800537a:	f000 f887 	bl	800548c <__sinit>
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <_fflush_r+0x6c>)
 8005380:	429c      	cmp	r4, r3
 8005382:	d11b      	bne.n	80053bc <_fflush_r+0x58>
 8005384:	686c      	ldr	r4, [r5, #4]
 8005386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0ef      	beq.n	800536e <_fflush_r+0xa>
 800538e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005390:	07d0      	lsls	r0, r2, #31
 8005392:	d404      	bmi.n	800539e <_fflush_r+0x3a>
 8005394:	0599      	lsls	r1, r3, #22
 8005396:	d402      	bmi.n	800539e <_fflush_r+0x3a>
 8005398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800539a:	f000 f915 	bl	80055c8 <__retarget_lock_acquire_recursive>
 800539e:	4628      	mov	r0, r5
 80053a0:	4621      	mov	r1, r4
 80053a2:	f7ff ff59 	bl	8005258 <__sflush_r>
 80053a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053a8:	07da      	lsls	r2, r3, #31
 80053aa:	4605      	mov	r5, r0
 80053ac:	d4e0      	bmi.n	8005370 <_fflush_r+0xc>
 80053ae:	89a3      	ldrh	r3, [r4, #12]
 80053b0:	059b      	lsls	r3, r3, #22
 80053b2:	d4dd      	bmi.n	8005370 <_fflush_r+0xc>
 80053b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053b6:	f000 f908 	bl	80055ca <__retarget_lock_release_recursive>
 80053ba:	e7d9      	b.n	8005370 <_fflush_r+0xc>
 80053bc:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <_fflush_r+0x70>)
 80053be:	429c      	cmp	r4, r3
 80053c0:	d101      	bne.n	80053c6 <_fflush_r+0x62>
 80053c2:	68ac      	ldr	r4, [r5, #8]
 80053c4:	e7df      	b.n	8005386 <_fflush_r+0x22>
 80053c6:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <_fflush_r+0x74>)
 80053c8:	429c      	cmp	r4, r3
 80053ca:	bf08      	it	eq
 80053cc:	68ec      	ldreq	r4, [r5, #12]
 80053ce:	e7da      	b.n	8005386 <_fflush_r+0x22>
 80053d0:	0800605c 	.word	0x0800605c
 80053d4:	0800607c 	.word	0x0800607c
 80053d8:	0800603c 	.word	0x0800603c

080053dc <std>:
 80053dc:	2300      	movs	r3, #0
 80053de:	b510      	push	{r4, lr}
 80053e0:	4604      	mov	r4, r0
 80053e2:	e9c0 3300 	strd	r3, r3, [r0]
 80053e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053ea:	6083      	str	r3, [r0, #8]
 80053ec:	8181      	strh	r1, [r0, #12]
 80053ee:	6643      	str	r3, [r0, #100]	; 0x64
 80053f0:	81c2      	strh	r2, [r0, #14]
 80053f2:	6183      	str	r3, [r0, #24]
 80053f4:	4619      	mov	r1, r3
 80053f6:	2208      	movs	r2, #8
 80053f8:	305c      	adds	r0, #92	; 0x5c
 80053fa:	f7ff fdd7 	bl	8004fac <memset>
 80053fe:	4b05      	ldr	r3, [pc, #20]	; (8005414 <std+0x38>)
 8005400:	6263      	str	r3, [r4, #36]	; 0x24
 8005402:	4b05      	ldr	r3, [pc, #20]	; (8005418 <std+0x3c>)
 8005404:	62a3      	str	r3, [r4, #40]	; 0x28
 8005406:	4b05      	ldr	r3, [pc, #20]	; (800541c <std+0x40>)
 8005408:	62e3      	str	r3, [r4, #44]	; 0x2c
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <std+0x44>)
 800540c:	6224      	str	r4, [r4, #32]
 800540e:	6323      	str	r3, [r4, #48]	; 0x30
 8005410:	bd10      	pop	{r4, pc}
 8005412:	bf00      	nop
 8005414:	08005de5 	.word	0x08005de5
 8005418:	08005e07 	.word	0x08005e07
 800541c:	08005e3f 	.word	0x08005e3f
 8005420:	08005e63 	.word	0x08005e63

08005424 <_cleanup_r>:
 8005424:	4901      	ldr	r1, [pc, #4]	; (800542c <_cleanup_r+0x8>)
 8005426:	f000 b8af 	b.w	8005588 <_fwalk_reent>
 800542a:	bf00      	nop
 800542c:	08005365 	.word	0x08005365

08005430 <__sfmoreglue>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	1e4a      	subs	r2, r1, #1
 8005434:	2568      	movs	r5, #104	; 0x68
 8005436:	4355      	muls	r5, r2
 8005438:	460e      	mov	r6, r1
 800543a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800543e:	f000 f979 	bl	8005734 <_malloc_r>
 8005442:	4604      	mov	r4, r0
 8005444:	b140      	cbz	r0, 8005458 <__sfmoreglue+0x28>
 8005446:	2100      	movs	r1, #0
 8005448:	e9c0 1600 	strd	r1, r6, [r0]
 800544c:	300c      	adds	r0, #12
 800544e:	60a0      	str	r0, [r4, #8]
 8005450:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005454:	f7ff fdaa 	bl	8004fac <memset>
 8005458:	4620      	mov	r0, r4
 800545a:	bd70      	pop	{r4, r5, r6, pc}

0800545c <__sfp_lock_acquire>:
 800545c:	4801      	ldr	r0, [pc, #4]	; (8005464 <__sfp_lock_acquire+0x8>)
 800545e:	f000 b8b3 	b.w	80055c8 <__retarget_lock_acquire_recursive>
 8005462:	bf00      	nop
 8005464:	20000358 	.word	0x20000358

08005468 <__sfp_lock_release>:
 8005468:	4801      	ldr	r0, [pc, #4]	; (8005470 <__sfp_lock_release+0x8>)
 800546a:	f000 b8ae 	b.w	80055ca <__retarget_lock_release_recursive>
 800546e:	bf00      	nop
 8005470:	20000358 	.word	0x20000358

08005474 <__sinit_lock_acquire>:
 8005474:	4801      	ldr	r0, [pc, #4]	; (800547c <__sinit_lock_acquire+0x8>)
 8005476:	f000 b8a7 	b.w	80055c8 <__retarget_lock_acquire_recursive>
 800547a:	bf00      	nop
 800547c:	20000353 	.word	0x20000353

08005480 <__sinit_lock_release>:
 8005480:	4801      	ldr	r0, [pc, #4]	; (8005488 <__sinit_lock_release+0x8>)
 8005482:	f000 b8a2 	b.w	80055ca <__retarget_lock_release_recursive>
 8005486:	bf00      	nop
 8005488:	20000353 	.word	0x20000353

0800548c <__sinit>:
 800548c:	b510      	push	{r4, lr}
 800548e:	4604      	mov	r4, r0
 8005490:	f7ff fff0 	bl	8005474 <__sinit_lock_acquire>
 8005494:	69a3      	ldr	r3, [r4, #24]
 8005496:	b11b      	cbz	r3, 80054a0 <__sinit+0x14>
 8005498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800549c:	f7ff bff0 	b.w	8005480 <__sinit_lock_release>
 80054a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054a4:	6523      	str	r3, [r4, #80]	; 0x50
 80054a6:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <__sinit+0x68>)
 80054a8:	4a13      	ldr	r2, [pc, #76]	; (80054f8 <__sinit+0x6c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80054ae:	42a3      	cmp	r3, r4
 80054b0:	bf04      	itt	eq
 80054b2:	2301      	moveq	r3, #1
 80054b4:	61a3      	streq	r3, [r4, #24]
 80054b6:	4620      	mov	r0, r4
 80054b8:	f000 f820 	bl	80054fc <__sfp>
 80054bc:	6060      	str	r0, [r4, #4]
 80054be:	4620      	mov	r0, r4
 80054c0:	f000 f81c 	bl	80054fc <__sfp>
 80054c4:	60a0      	str	r0, [r4, #8]
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 f818 	bl	80054fc <__sfp>
 80054cc:	2200      	movs	r2, #0
 80054ce:	60e0      	str	r0, [r4, #12]
 80054d0:	2104      	movs	r1, #4
 80054d2:	6860      	ldr	r0, [r4, #4]
 80054d4:	f7ff ff82 	bl	80053dc <std>
 80054d8:	68a0      	ldr	r0, [r4, #8]
 80054da:	2201      	movs	r2, #1
 80054dc:	2109      	movs	r1, #9
 80054de:	f7ff ff7d 	bl	80053dc <std>
 80054e2:	68e0      	ldr	r0, [r4, #12]
 80054e4:	2202      	movs	r2, #2
 80054e6:	2112      	movs	r1, #18
 80054e8:	f7ff ff78 	bl	80053dc <std>
 80054ec:	2301      	movs	r3, #1
 80054ee:	61a3      	str	r3, [r4, #24]
 80054f0:	e7d2      	b.n	8005498 <__sinit+0xc>
 80054f2:	bf00      	nop
 80054f4:	08006038 	.word	0x08006038
 80054f8:	08005425 	.word	0x08005425

080054fc <__sfp>:
 80054fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fe:	4607      	mov	r7, r0
 8005500:	f7ff ffac 	bl	800545c <__sfp_lock_acquire>
 8005504:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <__sfp+0x84>)
 8005506:	681e      	ldr	r6, [r3, #0]
 8005508:	69b3      	ldr	r3, [r6, #24]
 800550a:	b913      	cbnz	r3, 8005512 <__sfp+0x16>
 800550c:	4630      	mov	r0, r6
 800550e:	f7ff ffbd 	bl	800548c <__sinit>
 8005512:	3648      	adds	r6, #72	; 0x48
 8005514:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005518:	3b01      	subs	r3, #1
 800551a:	d503      	bpl.n	8005524 <__sfp+0x28>
 800551c:	6833      	ldr	r3, [r6, #0]
 800551e:	b30b      	cbz	r3, 8005564 <__sfp+0x68>
 8005520:	6836      	ldr	r6, [r6, #0]
 8005522:	e7f7      	b.n	8005514 <__sfp+0x18>
 8005524:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005528:	b9d5      	cbnz	r5, 8005560 <__sfp+0x64>
 800552a:	4b16      	ldr	r3, [pc, #88]	; (8005584 <__sfp+0x88>)
 800552c:	60e3      	str	r3, [r4, #12]
 800552e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005532:	6665      	str	r5, [r4, #100]	; 0x64
 8005534:	f000 f847 	bl	80055c6 <__retarget_lock_init_recursive>
 8005538:	f7ff ff96 	bl	8005468 <__sfp_lock_release>
 800553c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005540:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005544:	6025      	str	r5, [r4, #0]
 8005546:	61a5      	str	r5, [r4, #24]
 8005548:	2208      	movs	r2, #8
 800554a:	4629      	mov	r1, r5
 800554c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005550:	f7ff fd2c 	bl	8004fac <memset>
 8005554:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005558:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800555c:	4620      	mov	r0, r4
 800555e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005560:	3468      	adds	r4, #104	; 0x68
 8005562:	e7d9      	b.n	8005518 <__sfp+0x1c>
 8005564:	2104      	movs	r1, #4
 8005566:	4638      	mov	r0, r7
 8005568:	f7ff ff62 	bl	8005430 <__sfmoreglue>
 800556c:	4604      	mov	r4, r0
 800556e:	6030      	str	r0, [r6, #0]
 8005570:	2800      	cmp	r0, #0
 8005572:	d1d5      	bne.n	8005520 <__sfp+0x24>
 8005574:	f7ff ff78 	bl	8005468 <__sfp_lock_release>
 8005578:	230c      	movs	r3, #12
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	e7ee      	b.n	800555c <__sfp+0x60>
 800557e:	bf00      	nop
 8005580:	08006038 	.word	0x08006038
 8005584:	ffff0001 	.word	0xffff0001

08005588 <_fwalk_reent>:
 8005588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800558c:	4606      	mov	r6, r0
 800558e:	4688      	mov	r8, r1
 8005590:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005594:	2700      	movs	r7, #0
 8005596:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800559a:	f1b9 0901 	subs.w	r9, r9, #1
 800559e:	d505      	bpl.n	80055ac <_fwalk_reent+0x24>
 80055a0:	6824      	ldr	r4, [r4, #0]
 80055a2:	2c00      	cmp	r4, #0
 80055a4:	d1f7      	bne.n	8005596 <_fwalk_reent+0xe>
 80055a6:	4638      	mov	r0, r7
 80055a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ac:	89ab      	ldrh	r3, [r5, #12]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d907      	bls.n	80055c2 <_fwalk_reent+0x3a>
 80055b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055b6:	3301      	adds	r3, #1
 80055b8:	d003      	beq.n	80055c2 <_fwalk_reent+0x3a>
 80055ba:	4629      	mov	r1, r5
 80055bc:	4630      	mov	r0, r6
 80055be:	47c0      	blx	r8
 80055c0:	4307      	orrs	r7, r0
 80055c2:	3568      	adds	r5, #104	; 0x68
 80055c4:	e7e9      	b.n	800559a <_fwalk_reent+0x12>

080055c6 <__retarget_lock_init_recursive>:
 80055c6:	4770      	bx	lr

080055c8 <__retarget_lock_acquire_recursive>:
 80055c8:	4770      	bx	lr

080055ca <__retarget_lock_release_recursive>:
 80055ca:	4770      	bx	lr

080055cc <__swhatbuf_r>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	460e      	mov	r6, r1
 80055d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d4:	2900      	cmp	r1, #0
 80055d6:	b096      	sub	sp, #88	; 0x58
 80055d8:	4614      	mov	r4, r2
 80055da:	461d      	mov	r5, r3
 80055dc:	da07      	bge.n	80055ee <__swhatbuf_r+0x22>
 80055de:	2300      	movs	r3, #0
 80055e0:	602b      	str	r3, [r5, #0]
 80055e2:	89b3      	ldrh	r3, [r6, #12]
 80055e4:	061a      	lsls	r2, r3, #24
 80055e6:	d410      	bmi.n	800560a <__swhatbuf_r+0x3e>
 80055e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ec:	e00e      	b.n	800560c <__swhatbuf_r+0x40>
 80055ee:	466a      	mov	r2, sp
 80055f0:	f000 fc5e 	bl	8005eb0 <_fstat_r>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	dbf2      	blt.n	80055de <__swhatbuf_r+0x12>
 80055f8:	9a01      	ldr	r2, [sp, #4]
 80055fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005602:	425a      	negs	r2, r3
 8005604:	415a      	adcs	r2, r3
 8005606:	602a      	str	r2, [r5, #0]
 8005608:	e7ee      	b.n	80055e8 <__swhatbuf_r+0x1c>
 800560a:	2340      	movs	r3, #64	; 0x40
 800560c:	2000      	movs	r0, #0
 800560e:	6023      	str	r3, [r4, #0]
 8005610:	b016      	add	sp, #88	; 0x58
 8005612:	bd70      	pop	{r4, r5, r6, pc}

08005614 <__smakebuf_r>:
 8005614:	898b      	ldrh	r3, [r1, #12]
 8005616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005618:	079d      	lsls	r5, r3, #30
 800561a:	4606      	mov	r6, r0
 800561c:	460c      	mov	r4, r1
 800561e:	d507      	bpl.n	8005630 <__smakebuf_r+0x1c>
 8005620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	6123      	str	r3, [r4, #16]
 8005628:	2301      	movs	r3, #1
 800562a:	6163      	str	r3, [r4, #20]
 800562c:	b002      	add	sp, #8
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	ab01      	add	r3, sp, #4
 8005632:	466a      	mov	r2, sp
 8005634:	f7ff ffca 	bl	80055cc <__swhatbuf_r>
 8005638:	9900      	ldr	r1, [sp, #0]
 800563a:	4605      	mov	r5, r0
 800563c:	4630      	mov	r0, r6
 800563e:	f000 f879 	bl	8005734 <_malloc_r>
 8005642:	b948      	cbnz	r0, 8005658 <__smakebuf_r+0x44>
 8005644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005648:	059a      	lsls	r2, r3, #22
 800564a:	d4ef      	bmi.n	800562c <__smakebuf_r+0x18>
 800564c:	f023 0303 	bic.w	r3, r3, #3
 8005650:	f043 0302 	orr.w	r3, r3, #2
 8005654:	81a3      	strh	r3, [r4, #12]
 8005656:	e7e3      	b.n	8005620 <__smakebuf_r+0xc>
 8005658:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <__smakebuf_r+0x7c>)
 800565a:	62b3      	str	r3, [r6, #40]	; 0x28
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	6020      	str	r0, [r4, #0]
 8005660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005664:	81a3      	strh	r3, [r4, #12]
 8005666:	9b00      	ldr	r3, [sp, #0]
 8005668:	6163      	str	r3, [r4, #20]
 800566a:	9b01      	ldr	r3, [sp, #4]
 800566c:	6120      	str	r0, [r4, #16]
 800566e:	b15b      	cbz	r3, 8005688 <__smakebuf_r+0x74>
 8005670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005674:	4630      	mov	r0, r6
 8005676:	f000 fc2d 	bl	8005ed4 <_isatty_r>
 800567a:	b128      	cbz	r0, 8005688 <__smakebuf_r+0x74>
 800567c:	89a3      	ldrh	r3, [r4, #12]
 800567e:	f023 0303 	bic.w	r3, r3, #3
 8005682:	f043 0301 	orr.w	r3, r3, #1
 8005686:	81a3      	strh	r3, [r4, #12]
 8005688:	89a0      	ldrh	r0, [r4, #12]
 800568a:	4305      	orrs	r5, r0
 800568c:	81a5      	strh	r5, [r4, #12]
 800568e:	e7cd      	b.n	800562c <__smakebuf_r+0x18>
 8005690:	08005425 	.word	0x08005425

08005694 <_free_r>:
 8005694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005696:	2900      	cmp	r1, #0
 8005698:	d048      	beq.n	800572c <_free_r+0x98>
 800569a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800569e:	9001      	str	r0, [sp, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f1a1 0404 	sub.w	r4, r1, #4
 80056a6:	bfb8      	it	lt
 80056a8:	18e4      	addlt	r4, r4, r3
 80056aa:	f000 fc35 	bl	8005f18 <__malloc_lock>
 80056ae:	4a20      	ldr	r2, [pc, #128]	; (8005730 <_free_r+0x9c>)
 80056b0:	9801      	ldr	r0, [sp, #4]
 80056b2:	6813      	ldr	r3, [r2, #0]
 80056b4:	4615      	mov	r5, r2
 80056b6:	b933      	cbnz	r3, 80056c6 <_free_r+0x32>
 80056b8:	6063      	str	r3, [r4, #4]
 80056ba:	6014      	str	r4, [r2, #0]
 80056bc:	b003      	add	sp, #12
 80056be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056c2:	f000 bc2f 	b.w	8005f24 <__malloc_unlock>
 80056c6:	42a3      	cmp	r3, r4
 80056c8:	d90b      	bls.n	80056e2 <_free_r+0x4e>
 80056ca:	6821      	ldr	r1, [r4, #0]
 80056cc:	1862      	adds	r2, r4, r1
 80056ce:	4293      	cmp	r3, r2
 80056d0:	bf04      	itt	eq
 80056d2:	681a      	ldreq	r2, [r3, #0]
 80056d4:	685b      	ldreq	r3, [r3, #4]
 80056d6:	6063      	str	r3, [r4, #4]
 80056d8:	bf04      	itt	eq
 80056da:	1852      	addeq	r2, r2, r1
 80056dc:	6022      	streq	r2, [r4, #0]
 80056de:	602c      	str	r4, [r5, #0]
 80056e0:	e7ec      	b.n	80056bc <_free_r+0x28>
 80056e2:	461a      	mov	r2, r3
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	b10b      	cbz	r3, 80056ec <_free_r+0x58>
 80056e8:	42a3      	cmp	r3, r4
 80056ea:	d9fa      	bls.n	80056e2 <_free_r+0x4e>
 80056ec:	6811      	ldr	r1, [r2, #0]
 80056ee:	1855      	adds	r5, r2, r1
 80056f0:	42a5      	cmp	r5, r4
 80056f2:	d10b      	bne.n	800570c <_free_r+0x78>
 80056f4:	6824      	ldr	r4, [r4, #0]
 80056f6:	4421      	add	r1, r4
 80056f8:	1854      	adds	r4, r2, r1
 80056fa:	42a3      	cmp	r3, r4
 80056fc:	6011      	str	r1, [r2, #0]
 80056fe:	d1dd      	bne.n	80056bc <_free_r+0x28>
 8005700:	681c      	ldr	r4, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	6053      	str	r3, [r2, #4]
 8005706:	4421      	add	r1, r4
 8005708:	6011      	str	r1, [r2, #0]
 800570a:	e7d7      	b.n	80056bc <_free_r+0x28>
 800570c:	d902      	bls.n	8005714 <_free_r+0x80>
 800570e:	230c      	movs	r3, #12
 8005710:	6003      	str	r3, [r0, #0]
 8005712:	e7d3      	b.n	80056bc <_free_r+0x28>
 8005714:	6825      	ldr	r5, [r4, #0]
 8005716:	1961      	adds	r1, r4, r5
 8005718:	428b      	cmp	r3, r1
 800571a:	bf04      	itt	eq
 800571c:	6819      	ldreq	r1, [r3, #0]
 800571e:	685b      	ldreq	r3, [r3, #4]
 8005720:	6063      	str	r3, [r4, #4]
 8005722:	bf04      	itt	eq
 8005724:	1949      	addeq	r1, r1, r5
 8005726:	6021      	streq	r1, [r4, #0]
 8005728:	6054      	str	r4, [r2, #4]
 800572a:	e7c7      	b.n	80056bc <_free_r+0x28>
 800572c:	b003      	add	sp, #12
 800572e:	bd30      	pop	{r4, r5, pc}
 8005730:	200000a4 	.word	0x200000a4

08005734 <_malloc_r>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	1ccd      	adds	r5, r1, #3
 8005738:	f025 0503 	bic.w	r5, r5, #3
 800573c:	3508      	adds	r5, #8
 800573e:	2d0c      	cmp	r5, #12
 8005740:	bf38      	it	cc
 8005742:	250c      	movcc	r5, #12
 8005744:	2d00      	cmp	r5, #0
 8005746:	4606      	mov	r6, r0
 8005748:	db01      	blt.n	800574e <_malloc_r+0x1a>
 800574a:	42a9      	cmp	r1, r5
 800574c:	d903      	bls.n	8005756 <_malloc_r+0x22>
 800574e:	230c      	movs	r3, #12
 8005750:	6033      	str	r3, [r6, #0]
 8005752:	2000      	movs	r0, #0
 8005754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005756:	f000 fbdf 	bl	8005f18 <__malloc_lock>
 800575a:	4921      	ldr	r1, [pc, #132]	; (80057e0 <_malloc_r+0xac>)
 800575c:	680a      	ldr	r2, [r1, #0]
 800575e:	4614      	mov	r4, r2
 8005760:	b99c      	cbnz	r4, 800578a <_malloc_r+0x56>
 8005762:	4f20      	ldr	r7, [pc, #128]	; (80057e4 <_malloc_r+0xb0>)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	b923      	cbnz	r3, 8005772 <_malloc_r+0x3e>
 8005768:	4621      	mov	r1, r4
 800576a:	4630      	mov	r0, r6
 800576c:	f000 fb2a 	bl	8005dc4 <_sbrk_r>
 8005770:	6038      	str	r0, [r7, #0]
 8005772:	4629      	mov	r1, r5
 8005774:	4630      	mov	r0, r6
 8005776:	f000 fb25 	bl	8005dc4 <_sbrk_r>
 800577a:	1c43      	adds	r3, r0, #1
 800577c:	d123      	bne.n	80057c6 <_malloc_r+0x92>
 800577e:	230c      	movs	r3, #12
 8005780:	6033      	str	r3, [r6, #0]
 8005782:	4630      	mov	r0, r6
 8005784:	f000 fbce 	bl	8005f24 <__malloc_unlock>
 8005788:	e7e3      	b.n	8005752 <_malloc_r+0x1e>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	1b5b      	subs	r3, r3, r5
 800578e:	d417      	bmi.n	80057c0 <_malloc_r+0x8c>
 8005790:	2b0b      	cmp	r3, #11
 8005792:	d903      	bls.n	800579c <_malloc_r+0x68>
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	441c      	add	r4, r3
 8005798:	6025      	str	r5, [r4, #0]
 800579a:	e004      	b.n	80057a6 <_malloc_r+0x72>
 800579c:	6863      	ldr	r3, [r4, #4]
 800579e:	42a2      	cmp	r2, r4
 80057a0:	bf0c      	ite	eq
 80057a2:	600b      	streq	r3, [r1, #0]
 80057a4:	6053      	strne	r3, [r2, #4]
 80057a6:	4630      	mov	r0, r6
 80057a8:	f000 fbbc 	bl	8005f24 <__malloc_unlock>
 80057ac:	f104 000b 	add.w	r0, r4, #11
 80057b0:	1d23      	adds	r3, r4, #4
 80057b2:	f020 0007 	bic.w	r0, r0, #7
 80057b6:	1ac2      	subs	r2, r0, r3
 80057b8:	d0cc      	beq.n	8005754 <_malloc_r+0x20>
 80057ba:	1a1b      	subs	r3, r3, r0
 80057bc:	50a3      	str	r3, [r4, r2]
 80057be:	e7c9      	b.n	8005754 <_malloc_r+0x20>
 80057c0:	4622      	mov	r2, r4
 80057c2:	6864      	ldr	r4, [r4, #4]
 80057c4:	e7cc      	b.n	8005760 <_malloc_r+0x2c>
 80057c6:	1cc4      	adds	r4, r0, #3
 80057c8:	f024 0403 	bic.w	r4, r4, #3
 80057cc:	42a0      	cmp	r0, r4
 80057ce:	d0e3      	beq.n	8005798 <_malloc_r+0x64>
 80057d0:	1a21      	subs	r1, r4, r0
 80057d2:	4630      	mov	r0, r6
 80057d4:	f000 faf6 	bl	8005dc4 <_sbrk_r>
 80057d8:	3001      	adds	r0, #1
 80057da:	d1dd      	bne.n	8005798 <_malloc_r+0x64>
 80057dc:	e7cf      	b.n	800577e <_malloc_r+0x4a>
 80057de:	bf00      	nop
 80057e0:	200000a4 	.word	0x200000a4
 80057e4:	200000a8 	.word	0x200000a8

080057e8 <__sfputc_r>:
 80057e8:	6893      	ldr	r3, [r2, #8]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	b410      	push	{r4}
 80057f0:	6093      	str	r3, [r2, #8]
 80057f2:	da08      	bge.n	8005806 <__sfputc_r+0x1e>
 80057f4:	6994      	ldr	r4, [r2, #24]
 80057f6:	42a3      	cmp	r3, r4
 80057f8:	db01      	blt.n	80057fe <__sfputc_r+0x16>
 80057fa:	290a      	cmp	r1, #10
 80057fc:	d103      	bne.n	8005806 <__sfputc_r+0x1e>
 80057fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005802:	f7ff bc69 	b.w	80050d8 <__swbuf_r>
 8005806:	6813      	ldr	r3, [r2, #0]
 8005808:	1c58      	adds	r0, r3, #1
 800580a:	6010      	str	r0, [r2, #0]
 800580c:	7019      	strb	r1, [r3, #0]
 800580e:	4608      	mov	r0, r1
 8005810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005814:	4770      	bx	lr

08005816 <__sfputs_r>:
 8005816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005818:	4606      	mov	r6, r0
 800581a:	460f      	mov	r7, r1
 800581c:	4614      	mov	r4, r2
 800581e:	18d5      	adds	r5, r2, r3
 8005820:	42ac      	cmp	r4, r5
 8005822:	d101      	bne.n	8005828 <__sfputs_r+0x12>
 8005824:	2000      	movs	r0, #0
 8005826:	e007      	b.n	8005838 <__sfputs_r+0x22>
 8005828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800582c:	463a      	mov	r2, r7
 800582e:	4630      	mov	r0, r6
 8005830:	f7ff ffda 	bl	80057e8 <__sfputc_r>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d1f3      	bne.n	8005820 <__sfputs_r+0xa>
 8005838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800583c <_vfiprintf_r>:
 800583c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005840:	460d      	mov	r5, r1
 8005842:	b09d      	sub	sp, #116	; 0x74
 8005844:	4614      	mov	r4, r2
 8005846:	4698      	mov	r8, r3
 8005848:	4606      	mov	r6, r0
 800584a:	b118      	cbz	r0, 8005854 <_vfiprintf_r+0x18>
 800584c:	6983      	ldr	r3, [r0, #24]
 800584e:	b90b      	cbnz	r3, 8005854 <_vfiprintf_r+0x18>
 8005850:	f7ff fe1c 	bl	800548c <__sinit>
 8005854:	4b89      	ldr	r3, [pc, #548]	; (8005a7c <_vfiprintf_r+0x240>)
 8005856:	429d      	cmp	r5, r3
 8005858:	d11b      	bne.n	8005892 <_vfiprintf_r+0x56>
 800585a:	6875      	ldr	r5, [r6, #4]
 800585c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800585e:	07d9      	lsls	r1, r3, #31
 8005860:	d405      	bmi.n	800586e <_vfiprintf_r+0x32>
 8005862:	89ab      	ldrh	r3, [r5, #12]
 8005864:	059a      	lsls	r2, r3, #22
 8005866:	d402      	bmi.n	800586e <_vfiprintf_r+0x32>
 8005868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800586a:	f7ff fead 	bl	80055c8 <__retarget_lock_acquire_recursive>
 800586e:	89ab      	ldrh	r3, [r5, #12]
 8005870:	071b      	lsls	r3, r3, #28
 8005872:	d501      	bpl.n	8005878 <_vfiprintf_r+0x3c>
 8005874:	692b      	ldr	r3, [r5, #16]
 8005876:	b9eb      	cbnz	r3, 80058b4 <_vfiprintf_r+0x78>
 8005878:	4629      	mov	r1, r5
 800587a:	4630      	mov	r0, r6
 800587c:	f7ff fc7e 	bl	800517c <__swsetup_r>
 8005880:	b1c0      	cbz	r0, 80058b4 <_vfiprintf_r+0x78>
 8005882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005884:	07dc      	lsls	r4, r3, #31
 8005886:	d50e      	bpl.n	80058a6 <_vfiprintf_r+0x6a>
 8005888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800588c:	b01d      	add	sp, #116	; 0x74
 800588e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005892:	4b7b      	ldr	r3, [pc, #492]	; (8005a80 <_vfiprintf_r+0x244>)
 8005894:	429d      	cmp	r5, r3
 8005896:	d101      	bne.n	800589c <_vfiprintf_r+0x60>
 8005898:	68b5      	ldr	r5, [r6, #8]
 800589a:	e7df      	b.n	800585c <_vfiprintf_r+0x20>
 800589c:	4b79      	ldr	r3, [pc, #484]	; (8005a84 <_vfiprintf_r+0x248>)
 800589e:	429d      	cmp	r5, r3
 80058a0:	bf08      	it	eq
 80058a2:	68f5      	ldreq	r5, [r6, #12]
 80058a4:	e7da      	b.n	800585c <_vfiprintf_r+0x20>
 80058a6:	89ab      	ldrh	r3, [r5, #12]
 80058a8:	0598      	lsls	r0, r3, #22
 80058aa:	d4ed      	bmi.n	8005888 <_vfiprintf_r+0x4c>
 80058ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058ae:	f7ff fe8c 	bl	80055ca <__retarget_lock_release_recursive>
 80058b2:	e7e9      	b.n	8005888 <_vfiprintf_r+0x4c>
 80058b4:	2300      	movs	r3, #0
 80058b6:	9309      	str	r3, [sp, #36]	; 0x24
 80058b8:	2320      	movs	r3, #32
 80058ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058be:	f8cd 800c 	str.w	r8, [sp, #12]
 80058c2:	2330      	movs	r3, #48	; 0x30
 80058c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a88 <_vfiprintf_r+0x24c>
 80058c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058cc:	f04f 0901 	mov.w	r9, #1
 80058d0:	4623      	mov	r3, r4
 80058d2:	469a      	mov	sl, r3
 80058d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058d8:	b10a      	cbz	r2, 80058de <_vfiprintf_r+0xa2>
 80058da:	2a25      	cmp	r2, #37	; 0x25
 80058dc:	d1f9      	bne.n	80058d2 <_vfiprintf_r+0x96>
 80058de:	ebba 0b04 	subs.w	fp, sl, r4
 80058e2:	d00b      	beq.n	80058fc <_vfiprintf_r+0xc0>
 80058e4:	465b      	mov	r3, fp
 80058e6:	4622      	mov	r2, r4
 80058e8:	4629      	mov	r1, r5
 80058ea:	4630      	mov	r0, r6
 80058ec:	f7ff ff93 	bl	8005816 <__sfputs_r>
 80058f0:	3001      	adds	r0, #1
 80058f2:	f000 80aa 	beq.w	8005a4a <_vfiprintf_r+0x20e>
 80058f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058f8:	445a      	add	r2, fp
 80058fa:	9209      	str	r2, [sp, #36]	; 0x24
 80058fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 80a2 	beq.w	8005a4a <_vfiprintf_r+0x20e>
 8005906:	2300      	movs	r3, #0
 8005908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800590c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005910:	f10a 0a01 	add.w	sl, sl, #1
 8005914:	9304      	str	r3, [sp, #16]
 8005916:	9307      	str	r3, [sp, #28]
 8005918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800591c:	931a      	str	r3, [sp, #104]	; 0x68
 800591e:	4654      	mov	r4, sl
 8005920:	2205      	movs	r2, #5
 8005922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005926:	4858      	ldr	r0, [pc, #352]	; (8005a88 <_vfiprintf_r+0x24c>)
 8005928:	f7fa fc52 	bl	80001d0 <memchr>
 800592c:	9a04      	ldr	r2, [sp, #16]
 800592e:	b9d8      	cbnz	r0, 8005968 <_vfiprintf_r+0x12c>
 8005930:	06d1      	lsls	r1, r2, #27
 8005932:	bf44      	itt	mi
 8005934:	2320      	movmi	r3, #32
 8005936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800593a:	0713      	lsls	r3, r2, #28
 800593c:	bf44      	itt	mi
 800593e:	232b      	movmi	r3, #43	; 0x2b
 8005940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005944:	f89a 3000 	ldrb.w	r3, [sl]
 8005948:	2b2a      	cmp	r3, #42	; 0x2a
 800594a:	d015      	beq.n	8005978 <_vfiprintf_r+0x13c>
 800594c:	9a07      	ldr	r2, [sp, #28]
 800594e:	4654      	mov	r4, sl
 8005950:	2000      	movs	r0, #0
 8005952:	f04f 0c0a 	mov.w	ip, #10
 8005956:	4621      	mov	r1, r4
 8005958:	f811 3b01 	ldrb.w	r3, [r1], #1
 800595c:	3b30      	subs	r3, #48	; 0x30
 800595e:	2b09      	cmp	r3, #9
 8005960:	d94e      	bls.n	8005a00 <_vfiprintf_r+0x1c4>
 8005962:	b1b0      	cbz	r0, 8005992 <_vfiprintf_r+0x156>
 8005964:	9207      	str	r2, [sp, #28]
 8005966:	e014      	b.n	8005992 <_vfiprintf_r+0x156>
 8005968:	eba0 0308 	sub.w	r3, r0, r8
 800596c:	fa09 f303 	lsl.w	r3, r9, r3
 8005970:	4313      	orrs	r3, r2
 8005972:	9304      	str	r3, [sp, #16]
 8005974:	46a2      	mov	sl, r4
 8005976:	e7d2      	b.n	800591e <_vfiprintf_r+0xe2>
 8005978:	9b03      	ldr	r3, [sp, #12]
 800597a:	1d19      	adds	r1, r3, #4
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	9103      	str	r1, [sp, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	bfbb      	ittet	lt
 8005984:	425b      	neglt	r3, r3
 8005986:	f042 0202 	orrlt.w	r2, r2, #2
 800598a:	9307      	strge	r3, [sp, #28]
 800598c:	9307      	strlt	r3, [sp, #28]
 800598e:	bfb8      	it	lt
 8005990:	9204      	strlt	r2, [sp, #16]
 8005992:	7823      	ldrb	r3, [r4, #0]
 8005994:	2b2e      	cmp	r3, #46	; 0x2e
 8005996:	d10c      	bne.n	80059b2 <_vfiprintf_r+0x176>
 8005998:	7863      	ldrb	r3, [r4, #1]
 800599a:	2b2a      	cmp	r3, #42	; 0x2a
 800599c:	d135      	bne.n	8005a0a <_vfiprintf_r+0x1ce>
 800599e:	9b03      	ldr	r3, [sp, #12]
 80059a0:	1d1a      	adds	r2, r3, #4
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	9203      	str	r2, [sp, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bfb8      	it	lt
 80059aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80059ae:	3402      	adds	r4, #2
 80059b0:	9305      	str	r3, [sp, #20]
 80059b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005a98 <_vfiprintf_r+0x25c>
 80059b6:	7821      	ldrb	r1, [r4, #0]
 80059b8:	2203      	movs	r2, #3
 80059ba:	4650      	mov	r0, sl
 80059bc:	f7fa fc08 	bl	80001d0 <memchr>
 80059c0:	b140      	cbz	r0, 80059d4 <_vfiprintf_r+0x198>
 80059c2:	2340      	movs	r3, #64	; 0x40
 80059c4:	eba0 000a 	sub.w	r0, r0, sl
 80059c8:	fa03 f000 	lsl.w	r0, r3, r0
 80059cc:	9b04      	ldr	r3, [sp, #16]
 80059ce:	4303      	orrs	r3, r0
 80059d0:	3401      	adds	r4, #1
 80059d2:	9304      	str	r3, [sp, #16]
 80059d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059d8:	482c      	ldr	r0, [pc, #176]	; (8005a8c <_vfiprintf_r+0x250>)
 80059da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059de:	2206      	movs	r2, #6
 80059e0:	f7fa fbf6 	bl	80001d0 <memchr>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d03f      	beq.n	8005a68 <_vfiprintf_r+0x22c>
 80059e8:	4b29      	ldr	r3, [pc, #164]	; (8005a90 <_vfiprintf_r+0x254>)
 80059ea:	bb1b      	cbnz	r3, 8005a34 <_vfiprintf_r+0x1f8>
 80059ec:	9b03      	ldr	r3, [sp, #12]
 80059ee:	3307      	adds	r3, #7
 80059f0:	f023 0307 	bic.w	r3, r3, #7
 80059f4:	3308      	adds	r3, #8
 80059f6:	9303      	str	r3, [sp, #12]
 80059f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059fa:	443b      	add	r3, r7
 80059fc:	9309      	str	r3, [sp, #36]	; 0x24
 80059fe:	e767      	b.n	80058d0 <_vfiprintf_r+0x94>
 8005a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a04:	460c      	mov	r4, r1
 8005a06:	2001      	movs	r0, #1
 8005a08:	e7a5      	b.n	8005956 <_vfiprintf_r+0x11a>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	3401      	adds	r4, #1
 8005a0e:	9305      	str	r3, [sp, #20]
 8005a10:	4619      	mov	r1, r3
 8005a12:	f04f 0c0a 	mov.w	ip, #10
 8005a16:	4620      	mov	r0, r4
 8005a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a1c:	3a30      	subs	r2, #48	; 0x30
 8005a1e:	2a09      	cmp	r2, #9
 8005a20:	d903      	bls.n	8005a2a <_vfiprintf_r+0x1ee>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0c5      	beq.n	80059b2 <_vfiprintf_r+0x176>
 8005a26:	9105      	str	r1, [sp, #20]
 8005a28:	e7c3      	b.n	80059b2 <_vfiprintf_r+0x176>
 8005a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a2e:	4604      	mov	r4, r0
 8005a30:	2301      	movs	r3, #1
 8005a32:	e7f0      	b.n	8005a16 <_vfiprintf_r+0x1da>
 8005a34:	ab03      	add	r3, sp, #12
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	462a      	mov	r2, r5
 8005a3a:	4b16      	ldr	r3, [pc, #88]	; (8005a94 <_vfiprintf_r+0x258>)
 8005a3c:	a904      	add	r1, sp, #16
 8005a3e:	4630      	mov	r0, r6
 8005a40:	f3af 8000 	nop.w
 8005a44:	4607      	mov	r7, r0
 8005a46:	1c78      	adds	r0, r7, #1
 8005a48:	d1d6      	bne.n	80059f8 <_vfiprintf_r+0x1bc>
 8005a4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a4c:	07d9      	lsls	r1, r3, #31
 8005a4e:	d405      	bmi.n	8005a5c <_vfiprintf_r+0x220>
 8005a50:	89ab      	ldrh	r3, [r5, #12]
 8005a52:	059a      	lsls	r2, r3, #22
 8005a54:	d402      	bmi.n	8005a5c <_vfiprintf_r+0x220>
 8005a56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a58:	f7ff fdb7 	bl	80055ca <__retarget_lock_release_recursive>
 8005a5c:	89ab      	ldrh	r3, [r5, #12]
 8005a5e:	065b      	lsls	r3, r3, #25
 8005a60:	f53f af12 	bmi.w	8005888 <_vfiprintf_r+0x4c>
 8005a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a66:	e711      	b.n	800588c <_vfiprintf_r+0x50>
 8005a68:	ab03      	add	r3, sp, #12
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	462a      	mov	r2, r5
 8005a6e:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <_vfiprintf_r+0x258>)
 8005a70:	a904      	add	r1, sp, #16
 8005a72:	4630      	mov	r0, r6
 8005a74:	f000 f880 	bl	8005b78 <_printf_i>
 8005a78:	e7e4      	b.n	8005a44 <_vfiprintf_r+0x208>
 8005a7a:	bf00      	nop
 8005a7c:	0800605c 	.word	0x0800605c
 8005a80:	0800607c 	.word	0x0800607c
 8005a84:	0800603c 	.word	0x0800603c
 8005a88:	0800609c 	.word	0x0800609c
 8005a8c:	080060a6 	.word	0x080060a6
 8005a90:	00000000 	.word	0x00000000
 8005a94:	08005817 	.word	0x08005817
 8005a98:	080060a2 	.word	0x080060a2

08005a9c <_printf_common>:
 8005a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	4699      	mov	r9, r3
 8005aa4:	688a      	ldr	r2, [r1, #8]
 8005aa6:	690b      	ldr	r3, [r1, #16]
 8005aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005aac:	4293      	cmp	r3, r2
 8005aae:	bfb8      	it	lt
 8005ab0:	4613      	movlt	r3, r2
 8005ab2:	6033      	str	r3, [r6, #0]
 8005ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ab8:	4607      	mov	r7, r0
 8005aba:	460c      	mov	r4, r1
 8005abc:	b10a      	cbz	r2, 8005ac2 <_printf_common+0x26>
 8005abe:	3301      	adds	r3, #1
 8005ac0:	6033      	str	r3, [r6, #0]
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	0699      	lsls	r1, r3, #26
 8005ac6:	bf42      	ittt	mi
 8005ac8:	6833      	ldrmi	r3, [r6, #0]
 8005aca:	3302      	addmi	r3, #2
 8005acc:	6033      	strmi	r3, [r6, #0]
 8005ace:	6825      	ldr	r5, [r4, #0]
 8005ad0:	f015 0506 	ands.w	r5, r5, #6
 8005ad4:	d106      	bne.n	8005ae4 <_printf_common+0x48>
 8005ad6:	f104 0a19 	add.w	sl, r4, #25
 8005ada:	68e3      	ldr	r3, [r4, #12]
 8005adc:	6832      	ldr	r2, [r6, #0]
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	42ab      	cmp	r3, r5
 8005ae2:	dc26      	bgt.n	8005b32 <_printf_common+0x96>
 8005ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ae8:	1e13      	subs	r3, r2, #0
 8005aea:	6822      	ldr	r2, [r4, #0]
 8005aec:	bf18      	it	ne
 8005aee:	2301      	movne	r3, #1
 8005af0:	0692      	lsls	r2, r2, #26
 8005af2:	d42b      	bmi.n	8005b4c <_printf_common+0xb0>
 8005af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005af8:	4649      	mov	r1, r9
 8005afa:	4638      	mov	r0, r7
 8005afc:	47c0      	blx	r8
 8005afe:	3001      	adds	r0, #1
 8005b00:	d01e      	beq.n	8005b40 <_printf_common+0xa4>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	68e5      	ldr	r5, [r4, #12]
 8005b06:	6832      	ldr	r2, [r6, #0]
 8005b08:	f003 0306 	and.w	r3, r3, #6
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	bf08      	it	eq
 8005b10:	1aad      	subeq	r5, r5, r2
 8005b12:	68a3      	ldr	r3, [r4, #8]
 8005b14:	6922      	ldr	r2, [r4, #16]
 8005b16:	bf0c      	ite	eq
 8005b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b1c:	2500      	movne	r5, #0
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	bfc4      	itt	gt
 8005b22:	1a9b      	subgt	r3, r3, r2
 8005b24:	18ed      	addgt	r5, r5, r3
 8005b26:	2600      	movs	r6, #0
 8005b28:	341a      	adds	r4, #26
 8005b2a:	42b5      	cmp	r5, r6
 8005b2c:	d11a      	bne.n	8005b64 <_printf_common+0xc8>
 8005b2e:	2000      	movs	r0, #0
 8005b30:	e008      	b.n	8005b44 <_printf_common+0xa8>
 8005b32:	2301      	movs	r3, #1
 8005b34:	4652      	mov	r2, sl
 8005b36:	4649      	mov	r1, r9
 8005b38:	4638      	mov	r0, r7
 8005b3a:	47c0      	blx	r8
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d103      	bne.n	8005b48 <_printf_common+0xac>
 8005b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b48:	3501      	adds	r5, #1
 8005b4a:	e7c6      	b.n	8005ada <_printf_common+0x3e>
 8005b4c:	18e1      	adds	r1, r4, r3
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	2030      	movs	r0, #48	; 0x30
 8005b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b56:	4422      	add	r2, r4
 8005b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b60:	3302      	adds	r3, #2
 8005b62:	e7c7      	b.n	8005af4 <_printf_common+0x58>
 8005b64:	2301      	movs	r3, #1
 8005b66:	4622      	mov	r2, r4
 8005b68:	4649      	mov	r1, r9
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	47c0      	blx	r8
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d0e6      	beq.n	8005b40 <_printf_common+0xa4>
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7d9      	b.n	8005b2a <_printf_common+0x8e>
	...

08005b78 <_printf_i>:
 8005b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	4691      	mov	r9, r2
 8005b80:	7e27      	ldrb	r7, [r4, #24]
 8005b82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b84:	2f78      	cmp	r7, #120	; 0x78
 8005b86:	4680      	mov	r8, r0
 8005b88:	469a      	mov	sl, r3
 8005b8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b8e:	d807      	bhi.n	8005ba0 <_printf_i+0x28>
 8005b90:	2f62      	cmp	r7, #98	; 0x62
 8005b92:	d80a      	bhi.n	8005baa <_printf_i+0x32>
 8005b94:	2f00      	cmp	r7, #0
 8005b96:	f000 80d8 	beq.w	8005d4a <_printf_i+0x1d2>
 8005b9a:	2f58      	cmp	r7, #88	; 0x58
 8005b9c:	f000 80a3 	beq.w	8005ce6 <_printf_i+0x16e>
 8005ba0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ba8:	e03a      	b.n	8005c20 <_printf_i+0xa8>
 8005baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bae:	2b15      	cmp	r3, #21
 8005bb0:	d8f6      	bhi.n	8005ba0 <_printf_i+0x28>
 8005bb2:	a001      	add	r0, pc, #4	; (adr r0, 8005bb8 <_printf_i+0x40>)
 8005bb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005bb8:	08005c11 	.word	0x08005c11
 8005bbc:	08005c25 	.word	0x08005c25
 8005bc0:	08005ba1 	.word	0x08005ba1
 8005bc4:	08005ba1 	.word	0x08005ba1
 8005bc8:	08005ba1 	.word	0x08005ba1
 8005bcc:	08005ba1 	.word	0x08005ba1
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005ba1 	.word	0x08005ba1
 8005bd8:	08005ba1 	.word	0x08005ba1
 8005bdc:	08005ba1 	.word	0x08005ba1
 8005be0:	08005ba1 	.word	0x08005ba1
 8005be4:	08005d31 	.word	0x08005d31
 8005be8:	08005c55 	.word	0x08005c55
 8005bec:	08005d13 	.word	0x08005d13
 8005bf0:	08005ba1 	.word	0x08005ba1
 8005bf4:	08005ba1 	.word	0x08005ba1
 8005bf8:	08005d53 	.word	0x08005d53
 8005bfc:	08005ba1 	.word	0x08005ba1
 8005c00:	08005c55 	.word	0x08005c55
 8005c04:	08005ba1 	.word	0x08005ba1
 8005c08:	08005ba1 	.word	0x08005ba1
 8005c0c:	08005d1b 	.word	0x08005d1b
 8005c10:	680b      	ldr	r3, [r1, #0]
 8005c12:	1d1a      	adds	r2, r3, #4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	600a      	str	r2, [r1, #0]
 8005c18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c20:	2301      	movs	r3, #1
 8005c22:	e0a3      	b.n	8005d6c <_printf_i+0x1f4>
 8005c24:	6825      	ldr	r5, [r4, #0]
 8005c26:	6808      	ldr	r0, [r1, #0]
 8005c28:	062e      	lsls	r6, r5, #24
 8005c2a:	f100 0304 	add.w	r3, r0, #4
 8005c2e:	d50a      	bpl.n	8005c46 <_printf_i+0xce>
 8005c30:	6805      	ldr	r5, [r0, #0]
 8005c32:	600b      	str	r3, [r1, #0]
 8005c34:	2d00      	cmp	r5, #0
 8005c36:	da03      	bge.n	8005c40 <_printf_i+0xc8>
 8005c38:	232d      	movs	r3, #45	; 0x2d
 8005c3a:	426d      	negs	r5, r5
 8005c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c40:	485e      	ldr	r0, [pc, #376]	; (8005dbc <_printf_i+0x244>)
 8005c42:	230a      	movs	r3, #10
 8005c44:	e019      	b.n	8005c7a <_printf_i+0x102>
 8005c46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c4a:	6805      	ldr	r5, [r0, #0]
 8005c4c:	600b      	str	r3, [r1, #0]
 8005c4e:	bf18      	it	ne
 8005c50:	b22d      	sxthne	r5, r5
 8005c52:	e7ef      	b.n	8005c34 <_printf_i+0xbc>
 8005c54:	680b      	ldr	r3, [r1, #0]
 8005c56:	6825      	ldr	r5, [r4, #0]
 8005c58:	1d18      	adds	r0, r3, #4
 8005c5a:	6008      	str	r0, [r1, #0]
 8005c5c:	0628      	lsls	r0, r5, #24
 8005c5e:	d501      	bpl.n	8005c64 <_printf_i+0xec>
 8005c60:	681d      	ldr	r5, [r3, #0]
 8005c62:	e002      	b.n	8005c6a <_printf_i+0xf2>
 8005c64:	0669      	lsls	r1, r5, #25
 8005c66:	d5fb      	bpl.n	8005c60 <_printf_i+0xe8>
 8005c68:	881d      	ldrh	r5, [r3, #0]
 8005c6a:	4854      	ldr	r0, [pc, #336]	; (8005dbc <_printf_i+0x244>)
 8005c6c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c6e:	bf0c      	ite	eq
 8005c70:	2308      	moveq	r3, #8
 8005c72:	230a      	movne	r3, #10
 8005c74:	2100      	movs	r1, #0
 8005c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c7a:	6866      	ldr	r6, [r4, #4]
 8005c7c:	60a6      	str	r6, [r4, #8]
 8005c7e:	2e00      	cmp	r6, #0
 8005c80:	bfa2      	ittt	ge
 8005c82:	6821      	ldrge	r1, [r4, #0]
 8005c84:	f021 0104 	bicge.w	r1, r1, #4
 8005c88:	6021      	strge	r1, [r4, #0]
 8005c8a:	b90d      	cbnz	r5, 8005c90 <_printf_i+0x118>
 8005c8c:	2e00      	cmp	r6, #0
 8005c8e:	d04d      	beq.n	8005d2c <_printf_i+0x1b4>
 8005c90:	4616      	mov	r6, r2
 8005c92:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c96:	fb03 5711 	mls	r7, r3, r1, r5
 8005c9a:	5dc7      	ldrb	r7, [r0, r7]
 8005c9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ca0:	462f      	mov	r7, r5
 8005ca2:	42bb      	cmp	r3, r7
 8005ca4:	460d      	mov	r5, r1
 8005ca6:	d9f4      	bls.n	8005c92 <_printf_i+0x11a>
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d10b      	bne.n	8005cc4 <_printf_i+0x14c>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	07df      	lsls	r7, r3, #31
 8005cb0:	d508      	bpl.n	8005cc4 <_printf_i+0x14c>
 8005cb2:	6923      	ldr	r3, [r4, #16]
 8005cb4:	6861      	ldr	r1, [r4, #4]
 8005cb6:	4299      	cmp	r1, r3
 8005cb8:	bfde      	ittt	le
 8005cba:	2330      	movle	r3, #48	; 0x30
 8005cbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cc0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005cc4:	1b92      	subs	r2, r2, r6
 8005cc6:	6122      	str	r2, [r4, #16]
 8005cc8:	f8cd a000 	str.w	sl, [sp]
 8005ccc:	464b      	mov	r3, r9
 8005cce:	aa03      	add	r2, sp, #12
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	f7ff fee2 	bl	8005a9c <_printf_common>
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d14c      	bne.n	8005d76 <_printf_i+0x1fe>
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ce0:	b004      	add	sp, #16
 8005ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce6:	4835      	ldr	r0, [pc, #212]	; (8005dbc <_printf_i+0x244>)
 8005ce8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	680e      	ldr	r6, [r1, #0]
 8005cf0:	061f      	lsls	r7, r3, #24
 8005cf2:	f856 5b04 	ldr.w	r5, [r6], #4
 8005cf6:	600e      	str	r6, [r1, #0]
 8005cf8:	d514      	bpl.n	8005d24 <_printf_i+0x1ac>
 8005cfa:	07d9      	lsls	r1, r3, #31
 8005cfc:	bf44      	itt	mi
 8005cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8005d02:	6023      	strmi	r3, [r4, #0]
 8005d04:	b91d      	cbnz	r5, 8005d0e <_printf_i+0x196>
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	f023 0320 	bic.w	r3, r3, #32
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	2310      	movs	r3, #16
 8005d10:	e7b0      	b.n	8005c74 <_printf_i+0xfc>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	f043 0320 	orr.w	r3, r3, #32
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	2378      	movs	r3, #120	; 0x78
 8005d1c:	4828      	ldr	r0, [pc, #160]	; (8005dc0 <_printf_i+0x248>)
 8005d1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d22:	e7e3      	b.n	8005cec <_printf_i+0x174>
 8005d24:	065e      	lsls	r6, r3, #25
 8005d26:	bf48      	it	mi
 8005d28:	b2ad      	uxthmi	r5, r5
 8005d2a:	e7e6      	b.n	8005cfa <_printf_i+0x182>
 8005d2c:	4616      	mov	r6, r2
 8005d2e:	e7bb      	b.n	8005ca8 <_printf_i+0x130>
 8005d30:	680b      	ldr	r3, [r1, #0]
 8005d32:	6826      	ldr	r6, [r4, #0]
 8005d34:	6960      	ldr	r0, [r4, #20]
 8005d36:	1d1d      	adds	r5, r3, #4
 8005d38:	600d      	str	r5, [r1, #0]
 8005d3a:	0635      	lsls	r5, r6, #24
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	d501      	bpl.n	8005d44 <_printf_i+0x1cc>
 8005d40:	6018      	str	r0, [r3, #0]
 8005d42:	e002      	b.n	8005d4a <_printf_i+0x1d2>
 8005d44:	0671      	lsls	r1, r6, #25
 8005d46:	d5fb      	bpl.n	8005d40 <_printf_i+0x1c8>
 8005d48:	8018      	strh	r0, [r3, #0]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6123      	str	r3, [r4, #16]
 8005d4e:	4616      	mov	r6, r2
 8005d50:	e7ba      	b.n	8005cc8 <_printf_i+0x150>
 8005d52:	680b      	ldr	r3, [r1, #0]
 8005d54:	1d1a      	adds	r2, r3, #4
 8005d56:	600a      	str	r2, [r1, #0]
 8005d58:	681e      	ldr	r6, [r3, #0]
 8005d5a:	6862      	ldr	r2, [r4, #4]
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f7fa fa36 	bl	80001d0 <memchr>
 8005d64:	b108      	cbz	r0, 8005d6a <_printf_i+0x1f2>
 8005d66:	1b80      	subs	r0, r0, r6
 8005d68:	6060      	str	r0, [r4, #4]
 8005d6a:	6863      	ldr	r3, [r4, #4]
 8005d6c:	6123      	str	r3, [r4, #16]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d74:	e7a8      	b.n	8005cc8 <_printf_i+0x150>
 8005d76:	6923      	ldr	r3, [r4, #16]
 8005d78:	4632      	mov	r2, r6
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	4640      	mov	r0, r8
 8005d7e:	47d0      	blx	sl
 8005d80:	3001      	adds	r0, #1
 8005d82:	d0ab      	beq.n	8005cdc <_printf_i+0x164>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	079b      	lsls	r3, r3, #30
 8005d88:	d413      	bmi.n	8005db2 <_printf_i+0x23a>
 8005d8a:	68e0      	ldr	r0, [r4, #12]
 8005d8c:	9b03      	ldr	r3, [sp, #12]
 8005d8e:	4298      	cmp	r0, r3
 8005d90:	bfb8      	it	lt
 8005d92:	4618      	movlt	r0, r3
 8005d94:	e7a4      	b.n	8005ce0 <_printf_i+0x168>
 8005d96:	2301      	movs	r3, #1
 8005d98:	4632      	mov	r2, r6
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	47d0      	blx	sl
 8005da0:	3001      	adds	r0, #1
 8005da2:	d09b      	beq.n	8005cdc <_printf_i+0x164>
 8005da4:	3501      	adds	r5, #1
 8005da6:	68e3      	ldr	r3, [r4, #12]
 8005da8:	9903      	ldr	r1, [sp, #12]
 8005daa:	1a5b      	subs	r3, r3, r1
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dcf2      	bgt.n	8005d96 <_printf_i+0x21e>
 8005db0:	e7eb      	b.n	8005d8a <_printf_i+0x212>
 8005db2:	2500      	movs	r5, #0
 8005db4:	f104 0619 	add.w	r6, r4, #25
 8005db8:	e7f5      	b.n	8005da6 <_printf_i+0x22e>
 8005dba:	bf00      	nop
 8005dbc:	080060ad 	.word	0x080060ad
 8005dc0:	080060be 	.word	0x080060be

08005dc4 <_sbrk_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4d06      	ldr	r5, [pc, #24]	; (8005de0 <_sbrk_r+0x1c>)
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4608      	mov	r0, r1
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	f7fb f814 	bl	8000dfc <_sbrk>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d102      	bne.n	8005dde <_sbrk_r+0x1a>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	b103      	cbz	r3, 8005dde <_sbrk_r+0x1a>
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	bd38      	pop	{r3, r4, r5, pc}
 8005de0:	2000035c 	.word	0x2000035c

08005de4 <__sread>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	460c      	mov	r4, r1
 8005de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dec:	f000 f8a0 	bl	8005f30 <_read_r>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	bfab      	itete	ge
 8005df4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005df6:	89a3      	ldrhlt	r3, [r4, #12]
 8005df8:	181b      	addge	r3, r3, r0
 8005dfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dfe:	bfac      	ite	ge
 8005e00:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e02:	81a3      	strhlt	r3, [r4, #12]
 8005e04:	bd10      	pop	{r4, pc}

08005e06 <__swrite>:
 8005e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0a:	461f      	mov	r7, r3
 8005e0c:	898b      	ldrh	r3, [r1, #12]
 8005e0e:	05db      	lsls	r3, r3, #23
 8005e10:	4605      	mov	r5, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	4616      	mov	r6, r2
 8005e16:	d505      	bpl.n	8005e24 <__swrite+0x1e>
 8005e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f000 f868 	bl	8005ef4 <_lseek_r>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	4632      	mov	r2, r6
 8005e32:	463b      	mov	r3, r7
 8005e34:	4628      	mov	r0, r5
 8005e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3a:	f000 b817 	b.w	8005e6c <_write_r>

08005e3e <__sseek>:
 8005e3e:	b510      	push	{r4, lr}
 8005e40:	460c      	mov	r4, r1
 8005e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e46:	f000 f855 	bl	8005ef4 <_lseek_r>
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	bf15      	itete	ne
 8005e50:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e5a:	81a3      	strheq	r3, [r4, #12]
 8005e5c:	bf18      	it	ne
 8005e5e:	81a3      	strhne	r3, [r4, #12]
 8005e60:	bd10      	pop	{r4, pc}

08005e62 <__sclose>:
 8005e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e66:	f000 b813 	b.w	8005e90 <_close_r>
	...

08005e6c <_write_r>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	4d07      	ldr	r5, [pc, #28]	; (8005e8c <_write_r+0x20>)
 8005e70:	4604      	mov	r4, r0
 8005e72:	4608      	mov	r0, r1
 8005e74:	4611      	mov	r1, r2
 8005e76:	2200      	movs	r2, #0
 8005e78:	602a      	str	r2, [r5, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f7fa ff6d 	bl	8000d5a <_write>
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	d102      	bne.n	8005e8a <_write_r+0x1e>
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	b103      	cbz	r3, 8005e8a <_write_r+0x1e>
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	2000035c 	.word	0x2000035c

08005e90 <_close_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4d06      	ldr	r5, [pc, #24]	; (8005eac <_close_r+0x1c>)
 8005e94:	2300      	movs	r3, #0
 8005e96:	4604      	mov	r4, r0
 8005e98:	4608      	mov	r0, r1
 8005e9a:	602b      	str	r3, [r5, #0]
 8005e9c:	f7fa ff79 	bl	8000d92 <_close>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d102      	bne.n	8005eaa <_close_r+0x1a>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	b103      	cbz	r3, 8005eaa <_close_r+0x1a>
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	2000035c 	.word	0x2000035c

08005eb0 <_fstat_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d07      	ldr	r5, [pc, #28]	; (8005ed0 <_fstat_r+0x20>)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4608      	mov	r0, r1
 8005eba:	4611      	mov	r1, r2
 8005ebc:	602b      	str	r3, [r5, #0]
 8005ebe:	f7fa ff74 	bl	8000daa <_fstat>
 8005ec2:	1c43      	adds	r3, r0, #1
 8005ec4:	d102      	bne.n	8005ecc <_fstat_r+0x1c>
 8005ec6:	682b      	ldr	r3, [r5, #0]
 8005ec8:	b103      	cbz	r3, 8005ecc <_fstat_r+0x1c>
 8005eca:	6023      	str	r3, [r4, #0]
 8005ecc:	bd38      	pop	{r3, r4, r5, pc}
 8005ece:	bf00      	nop
 8005ed0:	2000035c 	.word	0x2000035c

08005ed4 <_isatty_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4d06      	ldr	r5, [pc, #24]	; (8005ef0 <_isatty_r+0x1c>)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4604      	mov	r4, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	602b      	str	r3, [r5, #0]
 8005ee0:	f7fa ff73 	bl	8000dca <_isatty>
 8005ee4:	1c43      	adds	r3, r0, #1
 8005ee6:	d102      	bne.n	8005eee <_isatty_r+0x1a>
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	b103      	cbz	r3, 8005eee <_isatty_r+0x1a>
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	2000035c 	.word	0x2000035c

08005ef4 <_lseek_r>:
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	4d07      	ldr	r5, [pc, #28]	; (8005f14 <_lseek_r+0x20>)
 8005ef8:	4604      	mov	r4, r0
 8005efa:	4608      	mov	r0, r1
 8005efc:	4611      	mov	r1, r2
 8005efe:	2200      	movs	r2, #0
 8005f00:	602a      	str	r2, [r5, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	f7fa ff6c 	bl	8000de0 <_lseek>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d102      	bne.n	8005f12 <_lseek_r+0x1e>
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	b103      	cbz	r3, 8005f12 <_lseek_r+0x1e>
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
 8005f14:	2000035c 	.word	0x2000035c

08005f18 <__malloc_lock>:
 8005f18:	4801      	ldr	r0, [pc, #4]	; (8005f20 <__malloc_lock+0x8>)
 8005f1a:	f7ff bb55 	b.w	80055c8 <__retarget_lock_acquire_recursive>
 8005f1e:	bf00      	nop
 8005f20:	20000354 	.word	0x20000354

08005f24 <__malloc_unlock>:
 8005f24:	4801      	ldr	r0, [pc, #4]	; (8005f2c <__malloc_unlock+0x8>)
 8005f26:	f7ff bb50 	b.w	80055ca <__retarget_lock_release_recursive>
 8005f2a:	bf00      	nop
 8005f2c:	20000354 	.word	0x20000354

08005f30 <_read_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4d07      	ldr	r5, [pc, #28]	; (8005f50 <_read_r+0x20>)
 8005f34:	4604      	mov	r4, r0
 8005f36:	4608      	mov	r0, r1
 8005f38:	4611      	mov	r1, r2
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	602a      	str	r2, [r5, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f7fa feee 	bl	8000d20 <_read>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_read_r+0x1e>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_read_r+0x1e>
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	2000035c 	.word	0x2000035c

08005f54 <_init>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	bf00      	nop
 8005f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5a:	bc08      	pop	{r3}
 8005f5c:	469e      	mov	lr, r3
 8005f5e:	4770      	bx	lr

08005f60 <_fini>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	bf00      	nop
 8005f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f66:	bc08      	pop	{r3}
 8005f68:	469e      	mov	lr, r3
 8005f6a:	4770      	bx	lr
